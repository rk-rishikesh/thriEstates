{"ast":null,"code":"/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\nimport { transform } from 'streaming-iterables';\nimport pRetry, { AbortError } from 'p-retry';\nimport { TreewalkCarSplitter } from 'carbites/treewalk';\nimport { pack } from 'ipfs-car/dist/esm/pack';\nimport { CID } from 'multiformats/cid';\nimport throttledQueue from 'throttled-queue';\nimport * as Token from './token.js';\nimport { fetch, File, Blob, FormData, Blockstore } from './platform.js';\nimport { toGatewayURL } from './gateway.js';\nimport { BlockstoreCarReader } from './bs-car-reader.js';\nimport pipe from 'it-pipe';\nconst MAX_STORE_RETRIES = 5;\nconst MAX_CONCURRENT_UPLOADS = 3;\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10; // chunk to ~10MB CARs\n\nconst RATE_LIMIT_REQUESTS = 30;\nconst RATE_LIMIT_PERIOD = 10 * 1000;\n/**\n * @typedef {import('./lib/interface.js').Service} Service\n * @typedef {import('./lib/interface.js').CIDString} CIDString\n * @typedef {import('./lib/interface.js').Deal} Deal\n * @typedef {import('./lib/interface.js').FileObject} FileObject\n * @typedef {import('./lib/interface.js').FilesSource} FilesSource\n * @typedef {import('./lib/interface.js').Pin} Pin\n * @typedef {import('./lib/interface.js').CarReader} CarReader\n * @typedef {import('ipfs-car/blockstore').Blockstore} BlockstoreI\n * @typedef {import('./lib/interface.js').RateLimiter} RateLimiter\n * @typedef {import('./lib/interface.js').RequestOptions} RequestOptions\n */\n\n/**\n * @returns {RateLimiter}\n */\n\nexport function createRateLimiter() {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD);\n  return () => throttle(() => {});\n}\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the NFTStorage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\n\nconst globalRateLimiter = createRateLimiter();\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @typedef {import('./lib/interface.js').Token<T>} TokenType\n */\n\n/**\n * @implements Service\n */\n\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?: URL, rateLimiter?: RateLimiter}} options\n   */\n  constructor(_ref) {\n    let {\n      token,\n      endpoint = new URL('https://api.nft.storage'),\n      rateLimiter\n    } = _ref;\n\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token;\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n\n    this.endpoint = endpoint;\n    /**\n     * @readonly\n     */\n\n    this.rateLimiter = rateLimiter || createRateLimiter();\n  }\n  /**\n   * @hidden\n   * @param {string} token\n   */\n\n\n  static auth(token) {\n    if (!token) throw new Error('missing token');\n    return {\n      Authorization: `Bearer ${token}`,\n      'X-Client': 'nft.storage/js'\n    };\n  }\n  /**\n   * Stores a single file and returns its CID.\n   *\n   * @param {Service} service\n   * @param {Blob} blob\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeBlob(service, blob, options) {\n    const blockstore = new Blockstore();\n    let cidString;\n\n    try {\n      const {\n        cid,\n        car\n      } = await NFTStorage.encodeBlob(blob, {\n        blockstore\n      });\n      await NFTStorage.storeCar(service, car, options);\n      cidString = cid.toString();\n    } finally {\n      await blockstore.close();\n    }\n\n    return cidString;\n  }\n  /**\n   * Stores a CAR file and returns its root CID.\n   *\n   * @param {Service} service\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeCar(_ref2, car) {\n    let {\n      endpoint,\n      token,\n      rateLimiter = globalRateLimiter\n    } = _ref2;\n    let {\n      onStoredChunk,\n      maxRetries,\n      decoders,\n      signal\n    } = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    const url = new URL('upload/', endpoint);\n    const headers = NFTStorage.auth(token);\n    const targetSize = MAX_CHUNK_SIZE;\n    const splitter = car instanceof Blob ? await TreewalkCarSplitter.fromBlob(car, targetSize, {\n      decoders\n    }) : new TreewalkCarSplitter(car, targetSize, {\n      decoders\n    });\n    const upload = transform(MAX_CONCURRENT_UPLOADS, async function (\n    /** @type {AsyncIterable<Uint8Array>} */\n    car) {\n      const carParts = [];\n\n      for await (const part of car) {\n        carParts.push(part);\n      }\n\n      const carFile = new Blob(carParts, {\n        type: 'application/car'\n      });\n      const cid = await pRetry(async () => {\n        await rateLimiter();\n        /** @type {Response} */\n\n        let response;\n\n        try {\n          response = await fetch(url.toString(), {\n            method: 'POST',\n            headers,\n            body: carFile,\n            signal\n          });\n        } catch (\n        /** @type {any} */\n        err) {\n          // TODO: remove me and test when client accepts custom fetch impl\n\n          /* c8 ignore next 1 */\n          throw signal && signal.aborted ? new AbortError(err) : err;\n        }\n        /* c8 ignore next 3 */\n\n\n        if (response.status === 429) {\n          throw new Error('rate limited');\n        }\n\n        const result = await response.json();\n\n        if (!result.ok) {\n          // do not retry if unauthorized - will not succeed\n          if (response.status === 401) {\n            throw new AbortError(result.error.message);\n          }\n\n          throw new Error(result.error.message);\n        }\n\n        return result.value.cid;\n      }, {\n        retries: maxRetries == null ? MAX_STORE_RETRIES : maxRetries\n      });\n      onStoredChunk && onStoredChunk(carFile.size);\n      return cid;\n    });\n    let root;\n\n    for await (const cid of upload(splitter.cars())) {\n      root = cid;\n    }\n\n    return (\n      /** @type {CIDString} */\n      root\n    );\n  }\n  /**\n   * Stores a directory of files and returns a CID. Provided files **MUST**\n   * be within the same directory, otherwise error is raised e.g. `foo/bar.png`,\n   * `foo/bla/baz.json` is ok but `foo/bar.png`, `bla/baz.json` is not.\n   *\n   * @param {Service} service\n   * @param {FilesSource} filesSource\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n\n\n  static async storeDirectory(service, filesSource, options) {\n    const blockstore = new Blockstore();\n    let cidString;\n\n    try {\n      const {\n        cid,\n        car\n      } = await NFTStorage.encodeDirectory(filesSource, {\n        blockstore\n      });\n      await NFTStorage.storeCar(service, car, options);\n      cidString = cid.toString();\n    } finally {\n      await blockstore.close();\n    }\n\n    return cidString;\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155. The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {Service} service\n   * @param {T} metadata\n   * @param {RequestOptions} [options]\n   * @returns {Promise<TokenType<T>>}\n   */\n\n\n  static async store(service, metadata, options) {\n    const {\n      token,\n      car\n    } = await NFTStorage.encodeNFT(metadata);\n    await NFTStorage.storeCar(service, car, options);\n    return token;\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<import('./lib/interface.js').StatusResult>}\n   */\n\n\n  static async status(_ref3, cid, options) {\n    let {\n      endpoint,\n      token,\n      rateLimiter = globalRateLimiter\n    } = _ref3;\n    const url = new URL(`${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token),\n      signal: options && options.signal\n    });\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created)\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Check if a CID of an NFT is being stored by NFT.Storage.\n   *\n   * @param {import('./lib/interface.js').PublicService} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<import('./lib/interface.js').CheckResult>}\n   */\n\n\n  static async check(_ref4, cid, options) {\n    let {\n      endpoint,\n      rateLimiter = globalRateLimiter\n    } = _ref4;\n    const url = new URL(`check/${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString(), {\n      signal: options && options.signal\n    });\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin\n      };\n    } else {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Removes stored content by its CID from this account. Please note that\n   * even if content is removed from the service other nodes that have\n   * replicated it might still continue providing it.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<void>}\n   */\n\n\n  static async delete(_ref5, cid, options) {\n    let {\n      endpoint,\n      token,\n      rateLimiter = globalRateLimiter\n    } = _ref5;\n    const url = new URL(`${cid}/`, endpoint);\n    await rateLimiter();\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token),\n      signal: options && options.signal\n    });\n    /* c8 ignore next 3 */\n\n    if (response.status === 429) {\n      throw new Error('rate limited');\n    }\n\n    const result = await response.json();\n\n    if (!result.ok) {\n      throw new Error(result.error.message);\n    }\n  }\n  /**\n   * Encodes the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155 to a\n   * CAR file. The `token.image` must be either a `File` or a `Blob` instance,\n   * which will be stored and the corresponding content address URL will be\n   * saved in the metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const { token, car } = await NFTStorage.encodeNFT({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', token.url)\n   * console.log('metadata.json contents:\\n', token.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', token.embed())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} input\n   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: CarReader }>}\n   */\n\n\n  static async encodeNFT(input) {\n    validateERC1155(input);\n    return Token.Token.encode(input);\n  }\n  /**\n   * Encodes a single file to a CAR file and also returns its root CID.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const { cid, car } = await NFTStorage.encodeBlob(content)\n   *\n   * // Root CID of the file\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n\n\n  static async encodeBlob(blob) {\n    let {\n      blockstore\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content');\n    }\n\n    return packCar([toImportCandidate('blob', blob)], {\n      blockstore,\n      wrapWithDirectory: false\n    });\n  }\n  /**\n   * Encodes a directory of files to a CAR file and also returns the root CID.\n   * Provided files **MUST** be within the same directory, otherwise error is\n   * raised e.g. `foo/bar.png`, `foo/bla/baz.json` is ok but `foo/bar.png`,\n   * `bla/baz.json` is not.\n   *\n   * @example\n   * ```js\n   * const { cid, car } = await NFTStorage.encodeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   *\n   * // Root CID of the directory\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {FilesSource} files\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n\n\n  static async encodeDirectory(files) {\n    let {\n      blockstore\n    } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    let size = 0;\n    const input = pipe(files, async function* (files) {\n      for await (const file of files) {\n        yield toImportCandidate(file.name, file);\n        size += file.size;\n      }\n    });\n    const packed = await packCar(input, {\n      blockstore,\n      wrapWithDirectory: true\n    });\n\n    if (size === 0) {\n      throw new Error('Total size of files should exceed 0, make sure to provide some content');\n    }\n\n    return packed;\n  } // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {RequestOptions} [options]\n   */\n\n\n  storeBlob(blob, options) {\n    return NFTStorage.storeBlob(this, blob, options);\n  }\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   */\n\n\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options);\n  }\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {FilesSource} files\n   * @param {RequestOptions} [options]\n   */\n\n\n  storeDirectory(files, options) {\n    return NFTStorage.storeDirectory(this, files, options);\n  }\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n\n\n  status(cid, options) {\n    return NFTStorage.status(this, cid, options);\n  }\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n\n\n  delete(cid, options) {\n    return NFTStorage.delete(this, cid, options);\n  }\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n\n\n  check(cid, options) {\n    return NFTStorage.check(this, cid, options);\n  }\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} token\n   * @param {RequestOptions} [options]\n   */\n\n\n  store(token, options) {\n    return NFTStorage.store(this, token, options);\n  }\n\n}\n/**\n * Cast an iterable to an asyncIterable\n * @template T\n * @param {Iterable<T>} iterable\n * @returns {AsyncIterable<T>}\n */\n\n\nexport function toAsyncIterable(iterable) {\n  return async function* () {\n    for (const item of iterable) {\n      yield item;\n    }\n  }();\n}\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @param {T} metadata\n */\n\nconst validateERC1155 = _ref6 => {\n  let {\n    name,\n    description,\n    image,\n    decimals\n  } = _ref6;\n\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError('string property `name` identifying the asset is required');\n  }\n\n  if (typeof description !== 'string') {\n    throw new TypeError('string property `description` describing asset is required');\n  }\n\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object');\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`);\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value');\n  }\n};\n/**\n * @param {import('ipfs-car/pack').ImportCandidateStream|Array<{ path: string, content: import('./platform.js').ReadableStream }>} input\n * @param {object} [options]\n * @param {BlockstoreI} [options.blockstore]\n * @param {boolean} [options.wrapWithDirectory]\n */\n\n\nconst packCar = async function (input) {\n  let {\n    blockstore,\n    wrapWithDirectory\n  } = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n  /* c8 ignore next 1 */\n  blockstore = blockstore || new Blockstore();\n  const {\n    root: cid\n  } = await pack({\n    input,\n    blockstore,\n    wrapWithDirectory\n  });\n  const car = new BlockstoreCarReader(1, [cid], blockstore);\n  return {\n    cid,\n    car\n  };\n};\n/**\n * @param {Deal[]} deals\n * @returns {Deal[]}\n */\n\n\nconst decodeDeals = deals => deals.map(deal => {\n  const {\n    dealActivation,\n    dealExpiration,\n    lastChanged\n  } = {\n    dealExpiration: null,\n    dealActivation: null,\n    ...deal\n  };\n  return { ...deal,\n    lastChanged: new Date(lastChanged),\n    ...(dealActivation && {\n      dealActivation: new Date(dealActivation)\n    }),\n    ...(dealExpiration && {\n      dealExpiration: new Date(dealExpiration)\n    })\n  };\n});\n/**\n * @param {Pin} pin\n * @returns {Pin}\n */\n\n\nconst decodePin = pin => ({ ...pin,\n  created: new Date(pin.created)\n});\n/**\n * Convert the passed blob to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is created only when needed.\n *\n * @param {string} path\n * @param {Pick<Blob, 'stream'>|{ stream: () => AsyncIterable<Uint8Array> }} blob\n * @returns {import('ipfs-core-types/src/utils.js').ImportCandidate}\n */\n\n\nfunction toImportCandidate(path, blob) {\n  /** @type {AsyncIterable<Uint8Array>} */\n  let stream;\n  return {\n    path,\n\n    get content() {\n      stream = stream || blob.stream();\n      return stream;\n    }\n\n  };\n}\n\nexport { NFTStorage, File, Blob, FormData, toGatewayURL, Token };","map":{"version":3,"names":["transform","pRetry","AbortError","TreewalkCarSplitter","pack","CID","throttledQueue","Token","fetch","File","Blob","FormData","Blockstore","toGatewayURL","BlockstoreCarReader","pipe","MAX_STORE_RETRIES","MAX_CONCURRENT_UPLOADS","MAX_CHUNK_SIZE","RATE_LIMIT_REQUESTS","RATE_LIMIT_PERIOD","createRateLimiter","throttle","globalRateLimiter","NFTStorage","constructor","token","endpoint","URL","rateLimiter","auth","Error","Authorization","storeBlob","service","blob","options","blockstore","cidString","cid","car","encodeBlob","storeCar","toString","close","onStoredChunk","maxRetries","decoders","signal","url","headers","targetSize","splitter","fromBlob","upload","carParts","part","push","carFile","type","response","method","body","err","aborted","status","result","json","ok","error","message","value","retries","size","root","cars","storeDirectory","filesSource","encodeDirectory","store","metadata","encodeNFT","deals","decodeDeals","pin","decodePin","created","Date","check","delete","input","validateERC1155","encode","packCar","toImportCandidate","wrapWithDirectory","files","file","name","packed","toAsyncIterable","iterable","item","description","image","decimals","TypeError","startsWith","console","warn","map","deal","dealActivation","dealExpiration","lastChanged","path","stream","content"],"sources":["C:/Users/rishi/contract-poc/ThriEstate/Brandvilla/node_modules/nft.storage/src/lib.js"],"sourcesContent":["/**\n * A client library for the https://nft.storage/ service. It provides a convenient\n * interface for working with the [Raw HTTP API](https://nft.storage/#api-docs)\n * from a web browser or [Node.js](https://nodejs.org/) and comes bundled with\n * TS for out-of-the box type inference and better IntelliSense.\n *\n * @example\n * ```js\n * import { NFTStorage, File, Blob } from \"nft.storage\"\n * const client = new NFTStorage({ token: API_TOKEN })\n *\n * const cid = await client.storeBlob(new Blob(['hello world']))\n * ```\n * @module\n */\n\nimport { transform } from 'streaming-iterables'\nimport pRetry, { AbortError } from 'p-retry'\nimport { TreewalkCarSplitter } from 'carbites/treewalk'\nimport { pack } from 'ipfs-car/dist/esm/pack'\nimport { CID } from 'multiformats/cid'\nimport throttledQueue from 'throttled-queue'\nimport * as Token from './token.js'\nimport { fetch, File, Blob, FormData, Blockstore } from './platform.js'\nimport { toGatewayURL } from './gateway.js'\nimport { BlockstoreCarReader } from './bs-car-reader.js'\nimport pipe from 'it-pipe'\n\nconst MAX_STORE_RETRIES = 5\nconst MAX_CONCURRENT_UPLOADS = 3\nconst MAX_CHUNK_SIZE = 1024 * 1024 * 10 // chunk to ~10MB CARs\nconst RATE_LIMIT_REQUESTS = 30\nconst RATE_LIMIT_PERIOD = 10 * 1000\n\n/**\n * @typedef {import('./lib/interface.js').Service} Service\n * @typedef {import('./lib/interface.js').CIDString} CIDString\n * @typedef {import('./lib/interface.js').Deal} Deal\n * @typedef {import('./lib/interface.js').FileObject} FileObject\n * @typedef {import('./lib/interface.js').FilesSource} FilesSource\n * @typedef {import('./lib/interface.js').Pin} Pin\n * @typedef {import('./lib/interface.js').CarReader} CarReader\n * @typedef {import('ipfs-car/blockstore').Blockstore} BlockstoreI\n * @typedef {import('./lib/interface.js').RateLimiter} RateLimiter\n * @typedef {import('./lib/interface.js').RequestOptions} RequestOptions\n */\n\n/**\n * @returns {RateLimiter}\n */\nexport function createRateLimiter() {\n  const throttle = throttledQueue(RATE_LIMIT_REQUESTS, RATE_LIMIT_PERIOD)\n  return () => throttle(() => {})\n}\n\n/**\n * Rate limiter used by static API if no rate limiter is passed. Note that each\n * instance of the NFTStorage class gets it's own limiter if none is passed.\n * This is because rate limits are enforced per API token.\n */\nconst globalRateLimiter = createRateLimiter()\n\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @typedef {import('./lib/interface.js').Token<T>} TokenType\n */\n\n/**\n * @implements Service\n */\nclass NFTStorage {\n  /**\n   * Constructs a client bound to the given `options.token` and\n   * `options.endpoint`.\n   *\n   * @example\n   * ```js\n   * import { NFTStorage, File, Blob } from \"nft.storage\"\n   * const client = new NFTStorage({ token: API_TOKEN })\n   *\n   * const cid = await client.storeBlob(new Blob(['hello world']))\n   * ```\n   * Optionally you could pass an alternative API endpoint (e.g. for testing)\n   * @example\n   * ```js\n   * import { NFTStorage } from \"nft.storage\"\n   * const client = new NFTStorage({\n   *   token: API_TOKEN\n   *   endpoint: new URL('http://localhost:8080/')\n   * })\n   * ```\n   *\n   * @param {{token: string, endpoint?: URL, rateLimiter?: RateLimiter}} options\n   */\n  constructor({\n    token,\n    endpoint = new URL('https://api.nft.storage'),\n    rateLimiter,\n  }) {\n    /**\n     * Authorization token.\n     *\n     * @readonly\n     */\n    this.token = token\n    /**\n     * Service API endpoint `URL`.\n     * @readonly\n     */\n    this.endpoint = endpoint\n    /**\n     * @readonly\n     */\n    this.rateLimiter = rateLimiter || createRateLimiter()\n  }\n\n  /**\n   * @hidden\n   * @param {string} token\n   */\n  static auth(token) {\n    if (!token) throw new Error('missing token')\n    return { Authorization: `Bearer ${token}`, 'X-Client': 'nft.storage/js' }\n  }\n\n  /**\n   * Stores a single file and returns its CID.\n   *\n   * @param {Service} service\n   * @param {Blob} blob\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async storeBlob(service, blob, options) {\n    const blockstore = new Blockstore()\n    let cidString\n\n    try {\n      const { cid, car } = await NFTStorage.encodeBlob(blob, { blockstore })\n      await NFTStorage.storeCar(service, car, options)\n      cidString = cid.toString()\n    } finally {\n      await blockstore.close()\n    }\n\n    return cidString\n  }\n\n  /**\n   * Stores a CAR file and returns its root CID.\n   *\n   * @param {Service} service\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async storeCar(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    car,\n    { onStoredChunk, maxRetries, decoders, signal } = {}\n  ) {\n    const url = new URL('upload/', endpoint)\n    const headers = NFTStorage.auth(token)\n    const targetSize = MAX_CHUNK_SIZE\n    const splitter =\n      car instanceof Blob\n        ? await TreewalkCarSplitter.fromBlob(car, targetSize, { decoders })\n        : new TreewalkCarSplitter(car, targetSize, { decoders })\n\n    const upload = transform(\n      MAX_CONCURRENT_UPLOADS,\n      async function (/** @type {AsyncIterable<Uint8Array>} */ car) {\n        const carParts = []\n        for await (const part of car) {\n          carParts.push(part)\n        }\n        const carFile = new Blob(carParts, { type: 'application/car' })\n        const cid = await pRetry(\n          async () => {\n            await rateLimiter()\n            /** @type {Response} */\n            let response\n            try {\n              response = await fetch(url.toString(), {\n                method: 'POST',\n                headers,\n                body: carFile,\n                signal,\n              })\n            } catch (/** @type {any} */ err) {\n              // TODO: remove me and test when client accepts custom fetch impl\n              /* c8 ignore next 1 */\n              throw signal && signal.aborted ? new AbortError(err) : err\n            }\n            /* c8 ignore next 3 */\n            if (response.status === 429) {\n              throw new Error('rate limited')\n            }\n            const result = await response.json()\n            if (!result.ok) {\n              // do not retry if unauthorized - will not succeed\n              if (response.status === 401) {\n                throw new AbortError(result.error.message)\n              }\n              throw new Error(result.error.message)\n            }\n            return result.value.cid\n          },\n          {\n            retries: maxRetries == null ? MAX_STORE_RETRIES : maxRetries,\n          }\n        )\n        onStoredChunk && onStoredChunk(carFile.size)\n        return cid\n      }\n    )\n\n    let root\n    for await (const cid of upload(splitter.cars())) {\n      root = cid\n    }\n\n    return /** @type {CIDString} */ (root)\n  }\n\n  /**\n   * Stores a directory of files and returns a CID. Provided files **MUST**\n   * be within the same directory, otherwise error is raised e.g. `foo/bar.png`,\n   * `foo/bla/baz.json` is ok but `foo/bar.png`, `bla/baz.json` is not.\n   *\n   * @param {Service} service\n   * @param {FilesSource} filesSource\n   * @param {RequestOptions} [options]\n   * @returns {Promise<CIDString>}\n   */\n  static async storeDirectory(service, filesSource, options) {\n    const blockstore = new Blockstore()\n    let cidString\n    try {\n      const { cid, car } = await NFTStorage.encodeDirectory(filesSource, {\n        blockstore,\n      })\n      await NFTStorage.storeCar(service, car, options)\n      cidString = cid.toString()\n    } finally {\n      await blockstore.close()\n    }\n\n    return cidString\n  }\n\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155. The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {Service} service\n   * @param {T} metadata\n   * @param {RequestOptions} [options]\n   * @returns {Promise<TokenType<T>>}\n   */\n  static async store(service, metadata, options) {\n    const { token, car } = await NFTStorage.encodeNFT(metadata)\n    await NFTStorage.storeCar(service, car, options)\n    return token\n  }\n\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<import('./lib/interface.js').StatusResult>}\n   */\n  static async status(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    cid,\n    options\n  ) {\n    const url = new URL(`${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString(), {\n      method: 'GET',\n      headers: NFTStorage.auth(token),\n      signal: options && options.signal,\n    })\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        size: result.value.size,\n        pin: decodePin(result.value.pin),\n        created: new Date(result.value.created),\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Check if a CID of an NFT is being stored by NFT.Storage.\n   *\n   * @param {import('./lib/interface.js').PublicService} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<import('./lib/interface.js').CheckResult>}\n   */\n  static async check(\n    { endpoint, rateLimiter = globalRateLimiter },\n    cid,\n    options\n  ) {\n    const url = new URL(`check/${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString(), {\n      signal: options && options.signal,\n    })\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n\n    if (result.ok) {\n      return {\n        cid: result.value.cid,\n        deals: decodeDeals(result.value.deals),\n        pin: result.value.pin,\n      }\n    } else {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Removes stored content by its CID from this account. Please note that\n   * even if content is removed from the service other nodes that have\n   * replicated it might still continue providing it.\n   *\n   * @param {Service} service\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   * @returns {Promise<void>}\n   */\n  static async delete(\n    { endpoint, token, rateLimiter = globalRateLimiter },\n    cid,\n    options\n  ) {\n    const url = new URL(`${cid}/`, endpoint)\n    await rateLimiter()\n    const response = await fetch(url.toString(), {\n      method: 'DELETE',\n      headers: NFTStorage.auth(token),\n      signal: options && options.signal,\n    })\n    /* c8 ignore next 3 */\n    if (response.status === 429) {\n      throw new Error('rate limited')\n    }\n    const result = await response.json()\n    if (!result.ok) {\n      throw new Error(result.error.message)\n    }\n  }\n\n  /**\n   * Encodes the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in ERC-1155 to a\n   * CAR file. The `token.image` must be either a `File` or a `Blob` instance,\n   * which will be stored and the corresponding content address URL will be\n   * saved in the metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const { token, car } = await NFTStorage.encodeNFT({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', token.url)\n   * console.log('metadata.json contents:\\n', token.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', token.embed())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} input\n   * @returns {Promise<{ cid: CID, token: TokenType<T>, car: CarReader }>}\n   */\n  static async encodeNFT(input) {\n    validateERC1155(input)\n    return Token.Token.encode(input)\n  }\n\n  /**\n   * Encodes a single file to a CAR file and also returns its root CID.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const { cid, car } = await NFTStorage.encodeBlob(content)\n   *\n   * // Root CID of the file\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n  static async encodeBlob(blob, { blockstore } = {}) {\n    if (blob.size === 0) {\n      throw new Error('Content size is 0, make sure to provide some content')\n    }\n    return packCar([toImportCandidate('blob', blob)], {\n      blockstore,\n      wrapWithDirectory: false,\n    })\n  }\n\n  /**\n   * Encodes a directory of files to a CAR file and also returns the root CID.\n   * Provided files **MUST** be within the same directory, otherwise error is\n   * raised e.g. `foo/bar.png`, `foo/bla/baz.json` is ok but `foo/bar.png`,\n   * `bla/baz.json` is not.\n   *\n   * @example\n   * ```js\n   * const { cid, car } = await NFTStorage.encodeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   *\n   * // Root CID of the directory\n   * console.log(cid.toString())\n   *\n   * // Now store the CAR file on NFT.Storage\n   * await client.storeCar(car)\n   * ```\n   *\n   * @param {FilesSource} files\n   * @param {object} [options]\n   * @param {BlockstoreI} [options.blockstore]\n   * @returns {Promise<{ cid: CID, car: CarReader }>}\n   */\n  static async encodeDirectory(files, { blockstore } = {}) {\n    let size = 0\n    const input = pipe(files, async function* (files) {\n      for await (const file of files) {\n        yield toImportCandidate(file.name, file)\n        size += file.size\n      }\n    })\n    const packed = await packCar(input, {\n      blockstore,\n      wrapWithDirectory: true,\n    })\n    if (size === 0) {\n      throw new Error(\n        'Total size of files should exceed 0, make sure to provide some content'\n      )\n    }\n    return packed\n  }\n\n  // Just a sugar so you don't have to pass around endpoint and token around.\n\n  /**\n   * Stores a single file and returns the corresponding Content Identifier (CID).\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File). Note\n   * that no file name or file metadata is retained.\n   *\n   * @example\n   * ```js\n   * const content = new Blob(['hello world'])\n   * const cid = await client.storeBlob(content)\n   * cid //> 'zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9'\n   * ```\n   *\n   * @param {Blob} blob\n   * @param {RequestOptions} [options]\n   */\n  storeBlob(blob, options) {\n    return NFTStorage.storeBlob(this, blob, options)\n  }\n\n  /**\n   * Stores files encoded as a single [Content Addressed Archive\n   * (CAR)](https://github.com/ipld/specs/blob/master/block-layer/content-addressable-archives.md).\n   *\n   * Takes a [Blob](https://developer.mozilla.org/en-US/docs/Web/API/Blob/Blob)\n   * or a [File](https://developer.mozilla.org/en-US/docs/Web/API/File).\n   *\n   * Returns the corresponding Content Identifier (CID).\n   *\n   * See the [`ipfs-car` docs](https://www.npmjs.com/package/ipfs-car) for more\n   * details on packing a CAR file.\n   *\n   * @example\n   * ```js\n   * import { pack } from 'ipfs-car/pack'\n   * import { CarReader } from '@ipld/car'\n   * const { out, root } = await pack({\n   *  input: fs.createReadStream('pinpie.pdf')\n   * })\n   * const expectedCid = root.toString()\n   * const carReader = await CarReader.fromIterable(out)\n   * const cid = await storage.storeCar(carReader)\n   * console.assert(cid === expectedCid)\n   * ```\n   *\n   * @example\n   * ```\n   * import { packToBlob } from 'ipfs-car/pack/blob'\n   * const data = 'Hello world'\n   * const { root, car } = await packToBlob({ input: [new TextEncoder().encode(data)] })\n   * const expectedCid = root.toString()\n   * const cid = await client.storeCar(car)\n   * console.assert(cid === expectedCid)\n   * ```\n   * @param {Blob|CarReader} car\n   * @param {import('./lib/interface.js').CarStorerOptions} [options]\n   */\n  storeCar(car, options) {\n    return NFTStorage.storeCar(this, car, options)\n  }\n\n  /**\n   * Stores a directory of files and returns a CID for the directory.\n   *\n   * @example\n   * ```js\n   * const cid = await client.storeDirectory([\n   *   new File(['hello world'], 'hello.txt'),\n   *   new File([JSON.stringify({'from': 'incognito'}, null, 2)], 'metadata.json')\n   * ])\n   * cid //>\n   * ```\n   *\n   * Argument can be a [FileList](https://developer.mozilla.org/en-US/docs/Web/API/FileList)\n   * instance as well, in which case directory structure will be retained.\n   *\n   * @param {FilesSource} files\n   * @param {RequestOptions} [options]\n   */\n  storeDirectory(files, options) {\n    return NFTStorage.storeDirectory(this, files, options)\n  }\n\n  /**\n   * Returns current status of the stored NFT by its CID. Note the NFT must\n   * have previously been stored by this account.\n   *\n   * @example\n   * ```js\n   * const status = await client.status('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n  status(cid, options) {\n    return NFTStorage.status(this, cid, options)\n  }\n\n  /**\n   * Removes stored content by its CID from the service.\n   *\n   * > Please note that even if content is removed from the service other nodes\n   * that have replicated it might still continue providing it.\n   *\n   * @example\n   * ```js\n   * await client.delete('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n  delete(cid, options) {\n    return NFTStorage.delete(this, cid, options)\n  }\n\n  /**\n   * Check if a CID of an NFT is being stored by nft.storage. Throws if the NFT\n   * was not found.\n   *\n   * @example\n   * ```js\n   * const status = await client.check('zdj7Wn9FQAURCP6MbwcWuzi7u65kAsXCdjNTkhbJcoaXBusq9')\n   * ```\n   *\n   * @param {string} cid\n   * @param {RequestOptions} [options]\n   */\n  check(cid, options) {\n    return NFTStorage.check(this, cid, options)\n  }\n\n  /**\n   * Stores the given token and all resources it references (in the form of a\n   * File or a Blob) along with a metadata JSON as specificed in\n   * [ERC-1155](https://eips.ethereum.org/EIPS/eip-1155#metadata). The\n   * `token.image` must be either a `File` or a `Blob` instance, which will be\n   * stored and the corresponding content address URL will be saved in the\n   * metadata JSON file under `image` field.\n   *\n   * If `token.properties` contains properties with `File` or `Blob` values,\n   * those also get stored and their URLs will be saved in the metadata JSON\n   * file in their place.\n   *\n   * Note: URLs for `File` objects will retain file names e.g. in case of\n   * `new File([bytes], 'cat.png', { type: 'image/png' })` will be transformed\n   * into a URL that looks like `ipfs://bafy...hash/image/cat.png`. For `Blob`\n   * objects, the URL will not have a file name name or mime type, instead it\n   * will be transformed into a URL that looks like\n   * `ipfs://bafy...hash/image/blob`.\n   *\n   * @example\n   * ```js\n   * const metadata = await client.store({\n   *   name: 'nft.storage store test',\n   *   description: 'Test ERC-1155 compatible metadata.',\n   *   image: new File(['<DATA>'], 'pinpie.jpg', { type: 'image/jpg' }),\n   *   properties: {\n   *     custom: 'Custom data can appear here, files are auto uploaded.',\n   *     file: new File(['<DATA>'], 'README.md', { type: 'text/plain' }),\n   *   }\n   * })\n   *\n   * console.log('IPFS URL for the metadata:', metadata.url)\n   * console.log('metadata.json contents:\\n', metadata.data)\n   * console.log('metadata.json with IPFS gateway URLs:\\n', metadata.embed())\n   * ```\n   *\n   * @template {import('./lib/interface.js').TokenInput} T\n   * @param {T} token\n   * @param {RequestOptions} [options]\n   */\n  store(token, options) {\n    return NFTStorage.store(this, token, options)\n  }\n}\n\n/**\n * Cast an iterable to an asyncIterable\n * @template T\n * @param {Iterable<T>} iterable\n * @returns {AsyncIterable<T>}\n */\nexport function toAsyncIterable(iterable) {\n  return (async function* () {\n    for (const item of iterable) {\n      yield item\n    }\n  })()\n}\n\n/**\n * @template {import('./lib/interface.js').TokenInput} T\n * @param {T} metadata\n */\nconst validateERC1155 = ({ name, description, image, decimals }) => {\n  // Just validate that expected fields are present\n  if (typeof name !== 'string') {\n    throw new TypeError(\n      'string property `name` identifying the asset is required'\n    )\n  }\n  if (typeof description !== 'string') {\n    throw new TypeError(\n      'string property `description` describing asset is required'\n    )\n  }\n  if (!(image instanceof Blob)) {\n    throw new TypeError('property `image` must be a Blob or File object')\n  } else if (!image.type.startsWith('image/')) {\n    console.warn(`According to ERC721 Metadata JSON Schema 'image' must have 'image/*' mime type.\n\nFor better interoperability we would highly recommend storing content with different mime type under 'properties' namespace e.g. \\`properties: { video: file }\\` and using 'image' field for storing a preview image for it instead.\n\nFor more context please see ERC-721 specification https://eips.ethereum.org/EIPS/eip-721`)\n  }\n\n  if (typeof decimals !== 'undefined' && typeof decimals !== 'number') {\n    throw new TypeError('property `decimals` must be an integer value')\n  }\n}\n\n/**\n * @param {import('ipfs-car/pack').ImportCandidateStream|Array<{ path: string, content: import('./platform.js').ReadableStream }>} input\n * @param {object} [options]\n * @param {BlockstoreI} [options.blockstore]\n * @param {boolean} [options.wrapWithDirectory]\n */\nconst packCar = async (input, { blockstore, wrapWithDirectory } = {}) => {\n  /* c8 ignore next 1 */\n  blockstore = blockstore || new Blockstore()\n  const { root: cid } = await pack({ input, blockstore, wrapWithDirectory })\n  const car = new BlockstoreCarReader(1, [cid], blockstore)\n  return { cid, car }\n}\n\n/**\n * @param {Deal[]} deals\n * @returns {Deal[]}\n */\nconst decodeDeals = (deals) =>\n  deals.map((deal) => {\n    const { dealActivation, dealExpiration, lastChanged } = {\n      dealExpiration: null,\n      dealActivation: null,\n      ...deal,\n    }\n\n    return {\n      ...deal,\n      lastChanged: new Date(lastChanged),\n      ...(dealActivation && { dealActivation: new Date(dealActivation) }),\n      ...(dealExpiration && { dealExpiration: new Date(dealExpiration) }),\n    }\n  })\n\n/**\n * @param {Pin} pin\n * @returns {Pin}\n */\nconst decodePin = (pin) => ({ ...pin, created: new Date(pin.created) })\n\n/**\n * Convert the passed blob to an \"import candidate\" - an object suitable for\n * passing to the ipfs-unixfs-importer. Note: content is an accessor so that\n * the stream is created only when needed.\n *\n * @param {string} path\n * @param {Pick<Blob, 'stream'>|{ stream: () => AsyncIterable<Uint8Array> }} blob\n * @returns {import('ipfs-core-types/src/utils.js').ImportCandidate}\n */\nfunction toImportCandidate(path, blob) {\n  /** @type {AsyncIterable<Uint8Array>} */\n  let stream\n  return {\n    path,\n    get content() {\n      stream = stream || blob.stream()\n      return stream\n    },\n  }\n}\n\nexport { NFTStorage, File, Blob, FormData, toGatewayURL, Token }\n"],"mappings":"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MAAMN,QAAQ,CAACO,IAAT,EAArB;;IACA,IAAI,CAACD,MAAM,CAACE,EAAZ,EAAgB;MACd,MAAM,IAAIrC,KAAJ,CAAUmC,MAAM,CAACG,KAAP,CAAaC,OAAvB,CAAN;IACD;EACF;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACwB,aAATW,SAAS,CAACS,KAAD,EAAQ;IAC5BC,eAAe,CAACD,KAAD,CAAf;IACA,OAAOnF,KAAK,CAACA,KAAN,CAAYqF,MAAZ,CAAmBF,KAAnB,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACyB,aAAVjD,UAAU,CAACN,IAAD,EAA4B;IAAA,IAArB;MAAEE;IAAF,CAAqB,uEAAJ,EAAI;;IACjD,IAAIF,IAAI,CAACsC,IAAL,KAAc,CAAlB,EAAqB;MACnB,MAAM,IAAI1C,KAAJ,CAAU,sDAAV,CAAN;IACD;;IACD,OAAO8D,OAAO,CAAC,CAACC,iBAAiB,CAAC,MAAD,EAAS3D,IAAT,CAAlB,CAAD,EAAoC;MAChDE,UADgD;MAEhD0D,iBAAiB,EAAE;IAF6B,CAApC,CAAd;EAID;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EAC8B,aAAfjB,eAAe,CAACkB,KAAD,EAA6B;IAAA,IAArB;MAAE3D;IAAF,CAAqB,uEAAJ,EAAI;IACvD,IAAIoC,IAAI,GAAG,CAAX;IACA,MAAMiB,KAAK,GAAG3E,IAAI,CAACiF,KAAD,EAAQ,iBAAiBA,KAAjB,EAAwB;MAChD,WAAW,MAAMC,IAAjB,IAAyBD,KAAzB,EAAgC;QAC9B,MAAMF,iBAAiB,CAACG,IAAI,CAACC,IAAN,EAAYD,IAAZ,CAAvB;QACAxB,IAAI,IAAIwB,IAAI,CAACxB,IAAb;MACD;IACF,CALiB,CAAlB;IAMA,MAAM0B,MAAM,GAAG,MAAMN,OAAO,CAACH,KAAD,EAAQ;MAClCrD,UADkC;MAElC0D,iBAAiB,EAAE;IAFe,CAAR,CAA5B;;IAIA,IAAItB,IAAI,KAAK,CAAb,EAAgB;MACd,MAAM,IAAI1C,KAAJ,CACJ,wEADI,CAAN;IAGD;;IACD,OAAOoE,MAAP;EACD,CAtbc,CAwbf;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACElE,SAAS,CAACE,IAAD,EAAOC,OAAP,EAAgB;IACvB,OAAOZ,UAAU,CAACS,SAAX,CAAqB,IAArB,EAA2BE,IAA3B,EAAiCC,OAAjC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEM,QAAQ,CAACF,GAAD,EAAMJ,OAAN,EAAe;IACrB,OAAOZ,UAAU,CAACkB,QAAX,CAAoB,IAApB,EAA0BF,GAA1B,EAA+BJ,OAA/B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEwC,cAAc,CAACoB,KAAD,EAAQ5D,OAAR,EAAiB;IAC7B,OAAOZ,UAAU,CAACoD,cAAX,CAA0B,IAA1B,EAAgCoB,KAAhC,EAAuC5D,OAAvC,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE6B,MAAM,CAAC1B,GAAD,EAAMH,OAAN,EAAe;IACnB,OAAOZ,UAAU,CAACyC,MAAX,CAAkB,IAAlB,EAAwB1B,GAAxB,EAA6BH,OAA7B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEqD,MAAM,CAAClD,GAAD,EAAMH,OAAN,EAAe;IACnB,OAAOZ,UAAU,CAACiE,MAAX,CAAkB,IAAlB,EAAwBlD,GAAxB,EAA6BH,OAA7B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACEoD,KAAK,CAACjD,GAAD,EAAMH,OAAN,EAAe;IAClB,OAAOZ,UAAU,CAACgE,KAAX,CAAiB,IAAjB,EAAuBjD,GAAvB,EAA4BH,OAA5B,CAAP;EACD;EAED;AACF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;EACE2C,KAAK,CAACrD,KAAD,EAAQU,OAAR,EAAiB;IACpB,OAAOZ,UAAU,CAACuD,KAAX,CAAiB,IAAjB,EAAuBrD,KAAvB,EAA8BU,OAA9B,CAAP;EACD;;AAzmBc;AA4mBjB;AACA;AACA;AACA;AACA;AACA;;;AACA,OAAO,SAASgE,eAAT,CAAyBC,QAAzB,EAAmC;EACxC,OAAQ,mBAAmB;IACzB,KAAK,MAAMC,IAAX,IAAmBD,QAAnB,EAA6B;MAC3B,MAAMC,IAAN;IACD;EACF,CAJM,EAAP;AAKD;AAED;AACA;AACA;AACA;;AACA,MAAMX,eAAe,GAAG,SAA4C;EAAA,IAA3C;IAAEO,IAAF;IAAQK,WAAR;IAAqBC,KAArB;IAA4BC;EAA5B,CAA2C;;EAClE;EACA,IAAI,OAAOP,IAAP,KAAgB,QAApB,EAA8B;IAC5B,MAAM,IAAIQ,SAAJ,CACJ,0DADI,CAAN;EAGD;;EACD,IAAI,OAAOH,WAAP,KAAuB,QAA3B,EAAqC;IACnC,MAAM,IAAIG,SAAJ,CACJ,4DADI,CAAN;EAGD;;EACD,IAAI,EAAEF,KAAK,YAAY9F,IAAnB,CAAJ,EAA8B;IAC5B,MAAM,IAAIgG,SAAJ,CAAc,gDAAd,CAAN;EACD,CAFD,MAEO,IAAI,CAACF,KAAK,CAAC7C,IAAN,CAAWgD,UAAX,CAAsB,QAAtB,CAAL,EAAsC;IAC3CC,OAAO,CAACC,IAAR,CAAc;AAClB;AACA;AACA;AACA,yFAJI;EAKD;;EAED,IAAI,OAAOJ,QAAP,KAAoB,WAApB,IAAmC,OAAOA,QAAP,KAAoB,QAA3D,EAAqE;IACnE,MAAM,IAAIC,SAAJ,CAAc,8CAAd,CAAN;EACD;AACF,CAzBD;AA2BA;AACA;AACA;AACA;AACA;AACA;;;AACA,MAAMb,OAAO,GAAG,gBAAOH,KAAP,EAAyD;EAAA,IAA3C;IAAErD,UAAF;IAAc0D;EAAd,CAA2C,uEAAP,EAAO;;EACvE;EACA1D,UAAU,GAAGA,UAAU,IAAI,IAAIzB,UAAJ,EAA3B;EACA,MAAM;IAAE8D,IAAI,EAAEnC;EAAR,IAAgB,MAAMnC,IAAI,CAAC;IAAEsF,KAAF;IAASrD,UAAT;IAAqB0D;EAArB,CAAD,CAAhC;EACA,MAAMvD,GAAG,GAAG,IAAI1B,mBAAJ,CAAwB,CAAxB,EAA2B,CAACyB,GAAD,CAA3B,EAAkCF,UAAlC,CAAZ;EACA,OAAO;IAAEE,GAAF;IAAOC;EAAP,CAAP;AACD,CAND;AAQA;AACA;AACA;AACA;;;AACA,MAAM2C,WAAW,GAAID,KAAD,IAClBA,KAAK,CAAC4B,GAAN,CAAWC,IAAD,IAAU;EAClB,MAAM;IAAEC,cAAF;IAAkBC,cAAlB;IAAkCC;EAAlC,IAAkD;IACtDD,cAAc,EAAE,IADsC;IAEtDD,cAAc,EAAE,IAFsC;IAGtD,GAAGD;EAHmD,CAAxD;EAMA,OAAO,EACL,GAAGA,IADE;IAELG,WAAW,EAAE,IAAI3B,IAAJ,CAAS2B,WAAT,CAFR;IAGL,IAAIF,cAAc,IAAI;MAAEA,cAAc,EAAE,IAAIzB,IAAJ,CAASyB,cAAT;IAAlB,CAAtB,CAHK;IAIL,IAAIC,cAAc,IAAI;MAAEA,cAAc,EAAE,IAAI1B,IAAJ,CAAS0B,cAAT;IAAlB,CAAtB;EAJK,CAAP;AAMD,CAbD,CADF;AAgBA;AACA;AACA;AACA;;;AACA,MAAM5B,SAAS,GAAID,GAAD,KAAU,EAAE,GAAGA,GAAL;EAAUE,OAAO,EAAE,IAAIC,IAAJ,CAASH,GAAG,CAACE,OAAb;AAAnB,CAAV,CAAlB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASQ,iBAAT,CAA2BqB,IAA3B,EAAiChF,IAAjC,EAAuC;EACrC;EACA,IAAIiF,MAAJ;EACA,OAAO;IACLD,IADK;;IAEL,IAAIE,OAAJ,GAAc;MACZD,MAAM,GAAGA,MAAM,IAAIjF,IAAI,CAACiF,MAAL,EAAnB;MACA,OAAOA,MAAP;IACD;;EALI,CAAP;AAOD;;AAED,SAAS5F,UAAT,EAAqBf,IAArB,EAA2BC,IAA3B,EAAiCC,QAAjC,EAA2CE,YAA3C,EAAyDN,KAAzD"},"metadata":{},"sourceType":"module"}