{"ast":null,"code":"import { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nlet JsonRpcMethod;\n\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\n\nasync function safeSolve(promise, def) {\n  try {\n    return await promise;\n  } catch (e) {\n    const d = def instanceof Function ? def(e) : def;\n    return d;\n  }\n}\n\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\n\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n\n  return BigNumber.from(cand);\n}\n\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\n\nconst DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\n\nclass Multicall {\n  constructor(options) {\n    var _this = this;\n\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n\n    this.scheduleExecution = () => {\n      if (this.queue.length > 0) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.run, this.options.timeWindow);\n      }\n    };\n\n    this.handle = (next, request, callback) => {\n      // Schedule for batching and return\n      if (this.batchableJsonRpcMethods.find(m => m === request.method)) {\n        this.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n        if (this.options.verbose) console.log('Scheduling call', request.method);\n        this.scheduleExecution();\n        return;\n      }\n\n      if (this.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n\n    this.run = async function () {\n      /* eslint-disable no-var */\n      if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n      const limit = Math.min(_this.options.batchSize, _this.queue.length);\n      if (limit === 0) return; // Skip multicall on single item\n\n      if (limit === 1) {\n        _this.forward(_this.queue[0]);\n\n        _this.queue = [];\n        if (_this.options.verbose) console.log('Skip multicall, single item');\n        return;\n      }\n\n      if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n      var items = _this.queue.slice(0, limit); // Update queue\n\n\n      _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n      if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n\n      if (_this.queue.length !== 0) {\n        _this.scheduleExecution();\n      } // Get next candidate\n\n\n      const next = items[0].next;\n      let blockTag; // Partition incompatible calls\n\n      var [items, discartItems] = partition(items, item => {\n        try {\n          // Mixed next callbacks\n          if (item.next !== next) return false;\n\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              // Unsupported eth_call parameters\n              if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                return false;\n              }\n\n            case JsonRpcMethod.ethGetBalance:\n            case JsonRpcMethod.ethGetCode:\n              // Mixed blockTags\n              const itemBlockTag = parseBlockTag(item.request.params[1]);\n              if (blockTag === undefined) blockTag = itemBlockTag;\n              if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n          }\n\n          return true;\n        } catch (_unused) {\n          return false;\n        }\n      }); // Forward discarted items\n      // end execution if no items remain\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Aggregate all calls\n\n\n      let callParams = items.map(v => {\n        try {\n          switch (v.request.method) {\n            case JsonRpcMethod.ethCall:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: v.request.params[0].to,\n                data: v.request.params[0].data,\n                gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                value: 0\n              };\n\n            case JsonRpcMethod.ethGetCode:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n              };\n\n            case JsonRpcMethod.ethGetBalance:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n              };\n\n            default:\n              return null;\n          }\n        } catch (_unused2) {\n          return null;\n        }\n      }); // Filter calls with enconding errors and forward items\n\n      var [items, discartItems] = partition(items, (_, i) => callParams[i] !== undefined);\n      callParams = callParams.filter(c => c);\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Encode multicall\n\n\n      let encodedCall;\n\n      try {\n        encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n      } catch (_unused3) {\n        _this.forward(items);\n\n        return;\n      } // Forward single multicall rpc call\n\n\n      const reqId = getRandomInt(); // TODO: fix types below..\n\n      const res = await safeSolve( // @ts-ignore\n      promisify(next)({\n        id: reqId,\n        jsonrpc: JsonRpcVersion,\n        method: JsonRpcMethod.ethCall,\n        params: [{\n          to: _this.options.contract,\n          value: 0,\n          data: encodedCall\n        }, BigNumber.isBigNumber(blockTag) ? blockTag.toNumber() : blockTag] // @ts-ignore\n\n      }), e => ({\n        jsonrpc: JsonRpcVersion,\n        id: reqId,\n        result: undefined,\n        error: e\n      })); // Error calling multicall\n      // Forward all calls to middleware\n      // @ts-ignore\n\n      if (res.error) {\n        return _this.forward(items);\n      } // Decode result from multicall\n\n\n      let decoded;\n\n      try {\n        // @ts-ignore\n        decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n      } catch (_unused4) {\n        _this.forward(items);\n\n        return;\n      } // Send results for each request\n      // errors fallback through the middleware\n\n\n      if (_this.options.verbose) console.log('Got response for', items.length);\n      items.forEach((item, index) => {\n        if (!decoded[0][index]) {\n          _this.forward(item);\n        } else {\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: decoded[1][index]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetCode:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetBalance:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n              });\n              break;\n          }\n        }\n      });\n    };\n\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(`Invalid batch size of ${this.options.batchSize}`);\n  }\n\n  forward(entries) {\n    if (Array.isArray(entries)) {\n      entries.forEach(e => e.next(e.request, e.callback));\n    } else {\n      entries.next(entries.request, entries.callback);\n    }\n  }\n\n  static isMulticall(cand) {\n    return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n  }\n\n  static isMulticallOptions(cand) {\n    return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n  }\n\n}\n\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\nconst ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\n\nclass MulticallProvider extends ethers.providers.BaseProvider {\n  constructor(provider, multicall) {\n    var _this;\n\n    super(provider.getNetwork());\n    _this = this;\n    this.provider = provider;\n    this.multicall = void 0;\n    this.listenerCount = this.provider.listenerCount;\n\n    this.getResolver = async function (name) {\n      const provider = _this.provider;\n\n      if (provider.getResolver) {\n        const ogResolver = await provider.getResolver(await name);\n        if (!ogResolver) return null;\n        return new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name);\n      }\n\n      return provider.getResolver(await name);\n    };\n\n    this.next = async function (req, callback) {\n      try {\n        switch (req.method) {\n          case JsonRpcMethod.ethCall:\n            _this.callback(req, callback, await _this.provider.call(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetCode:\n            _this.callback(req, callback, await _this.provider.getCode(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetBalance:\n            _this.callback(req, callback, await _this.provider.getBalance(req.params[0], req.params[1]));\n\n            break;\n        }\n      } catch (e) {\n        _this.callback(req, callback, undefined, e);\n      }\n    };\n\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(m => {\n      if (provider[m] !== undefined) {\n        this[m] = function () {\n          return provider[m](...arguments);\n        };\n      }\n    });\n  }\n\n  callback(req, callback, resp, err) {\n    callback(err, {\n      jsonrpc: JsonRpcVersion,\n      id: req.id,\n      result: resp,\n      error: err\n    });\n  }\n\n  async call(transaction, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag);\n  }\n\n  async getCode(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag);\n  }\n\n  async getBalance(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag);\n  }\n\n  async rpcCall(method) {\n    const reqId = getRandomInt();\n\n    for (var _len = arguments.length, params = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n      params[_key - 1] = arguments[_key];\n    }\n\n    const resp = await promisify(this.multicall.handle)(this.next, {\n      jsonrpc: JsonRpcVersion,\n      id: reqId,\n      method: method,\n      params: params\n    });\n    return resp.result;\n  }\n\n}\n\nclass MulticallExternalProvider {\n  constructor(provider, multicall) {\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n\n    if (provider.send) {\n      const next = async function next(req, callback) {\n        provider.send(req, callback);\n      };\n\n      this.send = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n\n    if (provider.sendAsync) {\n      const next = async function next(req, callback) {\n        provider.sendAsync(req, callback);\n      };\n\n      this.sendAsync = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n  }\n\n  get isMetaMask() {\n    return this.provider.isMetaMask;\n  }\n\n  get isStatus() {\n    return this.provider.isStatus;\n  }\n\n}\n\nconst multicallMiddleware = multicall => next => {\n  const lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n  return (request, callback) => {\n    return lib.handle(next, request, callback);\n  };\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\nexport { Multicall, index as providers };","map":{"version":3,"names":["BigNumber","ethers","walletContracts","getRandomInt","promisify","sequenceContext","JsonRpcVersion","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","JsonRpcMethod","safeSolve","promise","def","e","d","Function","partition","array","callback","reduce","result","element","push","parseBlockTag","cand","undefined","from","eqBlockTag","a","b","isBigNumber","eq","DefaultMulticallOptions","batchSize","timeWindow","contract","sequenceUtils","verbose","Multicall","constructor","options","_this","batchableJsonRpcMethods","ethCall","ethGetCode","ethGetBalance","multicallInterface","utils","Interface","abi","timeout","queue","scheduleExecution","clearTimeout","setTimeout","run","handle","next","request","find","m","method","console","log","limit","Math","min","forward","items","slice","blockTag","discartItems","item","params","gasPrice","value","itemBlockTag","_unused","callParams","map","v","delegateCall","revertOnError","to","data","gasLimit","gas","encodeFunctionData","getFunction","_unused2","_","filter","c","encodedCall","_unused3","reqId","res","id","jsonrpc","toNumber","error","decoded","decodeFunctionResult","_unused4","forEach","index","defaultAbiCoder","decode","DefaultOptions","Error","entries","Array","isArray","isMulticall","conf","isMulticallOptions","ProxyMethods","MulticallProvider","providers","BaseProvider","provider","multicall","getNetwork","listenerCount","getResolver","name","ogResolver","Resolver","address","req","getCode","getBalance","resp","err","transaction","rpcCall","addressOrName","MulticallExternalProvider","send","sendAsync","isMetaMask","isStatus","multicallMiddleware","lib","freeze","__proto__"],"sources":["C:/Users/rishi/contract-poc/ThriEstate/Brandvilla/node_modules/@0xsequence/multicall/dist/0xsequence-multicall.esm.js"],"sourcesContent":["import { BigNumber, ethers } from 'ethers';\nimport { walletContracts } from '@0xsequence/abi';\nimport { getRandomInt, promisify } from '@0xsequence/utils';\nimport { sequenceContext, JsonRpcVersion } from '@0xsequence/network';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nlet JsonRpcMethod;\n\n(function (JsonRpcMethod) {\n  JsonRpcMethod[\"ethCall\"] = \"eth_call\";\n  JsonRpcMethod[\"ethGetBalance\"] = \"eth_getBalance\";\n  JsonRpcMethod[\"ethGetCode\"] = \"eth_getCode\";\n})(JsonRpcMethod || (JsonRpcMethod = {}));\n\nasync function safeSolve(promise, def) {\n  try {\n    return await promise;\n  } catch (e) {\n    const d = def instanceof Function ? def(e) : def;\n    return d;\n  }\n}\nfunction partition(array, callback) {\n  return array.reduce(function (result, element, i) {\n    callback(element, i) ? result[0].push(element) : result[1].push(element);\n    return result;\n  }, [[], []]);\n}\nfunction parseBlockTag(cand) {\n  if (cand === undefined) return 'latest';\n\n  switch (cand) {\n    case 'earliest':\n    case 'latest':\n    case 'pending':\n      return cand;\n  }\n\n  return BigNumber.from(cand);\n}\nfunction eqBlockTag(a, b) {\n  if (a === b) return true;\n\n  if (BigNumber.isBigNumber(a)) {\n    if (BigNumber.isBigNumber(b)) return a.eq(b);\n    return false;\n  }\n\n  if (BigNumber.isBigNumber(b)) return false;\n  return a === b;\n}\n\nconst DefaultMulticallOptions = {\n  batchSize: 50,\n  timeWindow: 50,\n  contract: sequenceContext.sequenceUtils,\n  verbose: false\n};\nclass Multicall {\n  constructor(options) {\n    var _this = this;\n\n    this.batchableJsonRpcMethods = [JsonRpcMethod.ethCall, JsonRpcMethod.ethGetCode, JsonRpcMethod.ethGetBalance];\n    this.multicallInterface = new ethers.utils.Interface(walletContracts.sequenceUtils.abi);\n    this.options = void 0;\n    this.timeout = void 0;\n    this.queue = [];\n\n    this.scheduleExecution = () => {\n      if (this.queue.length > 0) {\n        if (this.timeout) clearTimeout(this.timeout);\n        this.timeout = setTimeout(this.run, this.options.timeWindow);\n      }\n    };\n\n    this.handle = (next, request, callback) => {\n      // Schedule for batching and return\n      if (this.batchableJsonRpcMethods.find(m => m === request.method)) {\n        this.queue.push({\n          request: request,\n          callback: callback,\n          next: next\n        });\n        if (this.options.verbose) console.log('Scheduling call', request.method);\n        this.scheduleExecution();\n        return;\n      }\n\n      if (this.options.verbose) console.log('Forwarded call', request.method); // Move to next handler\n\n      return next(request, callback);\n    };\n\n    this.run = async function () {\n      /* eslint-disable no-var */\n      if (_this.options.verbose) console.log('Processing multicall'); // Read items from queue\n\n      const limit = Math.min(_this.options.batchSize, _this.queue.length);\n      if (limit === 0) return; // Skip multicall on single item\n\n      if (limit === 1) {\n        _this.forward(_this.queue[0]);\n\n        _this.queue = [];\n        if (_this.options.verbose) console.log('Skip multicall, single item');\n        return;\n      }\n\n      if (_this.options.verbose) console.log('Resolving', limit); // Get batch from queue\n\n      var items = _this.queue.slice(0, limit); // Update queue\n\n\n      _this.queue = limit === _this.queue.length ? [] : _this.queue.slice(limit);\n      if (_this.options.verbose) console.log('Updated queue', _this.queue.length);\n\n      if (_this.queue.length !== 0) {\n        _this.scheduleExecution();\n      } // Get next candidate\n\n\n      const next = items[0].next;\n      let blockTag; // Partition incompatible calls\n\n      var [items, discartItems] = partition(items, item => {\n        try {\n          // Mixed next callbacks\n          if (item.next !== next) return false;\n\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              // Unsupported eth_call parameters\n              if (item.request.params[0].from || item.request.params[0].gasPrice || item.request.params[0].value) {\n                return false;\n              }\n\n            case JsonRpcMethod.ethGetBalance:\n            case JsonRpcMethod.ethGetCode:\n              // Mixed blockTags\n              const itemBlockTag = parseBlockTag(item.request.params[1]);\n              if (blockTag === undefined) blockTag = itemBlockTag;\n              if (!eqBlockTag(itemBlockTag, blockTag)) return false;\n          }\n\n          return true;\n        } catch (_unused) {\n          return false;\n        }\n      }); // Forward discarted items\n      // end execution if no items remain\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding incompatible calls', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Aggregate all calls\n\n\n      let callParams = items.map(v => {\n        try {\n          switch (v.request.method) {\n            case JsonRpcMethod.ethCall:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: v.request.params[0].to,\n                data: v.request.params[0].data,\n                gasLimit: v.request.params[0].gas ? v.request.params[0].gas : 0,\n                value: 0\n              };\n\n            case JsonRpcMethod.ethGetCode:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callCode'), [v.request.params[0]])\n              };\n\n            case JsonRpcMethod.ethGetBalance:\n              return {\n                delegateCall: false,\n                revertOnError: false,\n                target: _this.options.contract,\n                gasLimit: 0,\n                value: 0,\n                data: _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('callBalanceOf'), [v.request.params[0]])\n              };\n\n            default:\n              return null;\n          }\n        } catch (_unused2) {\n          return null;\n        }\n      }); // Filter calls with enconding errors and forward items\n\n      var [items, discartItems] = partition(items, (_, i) => callParams[i] !== undefined);\n      callParams = callParams.filter(c => c);\n\n      if (discartItems.length !== 0) {\n        if (_this.options.verbose) console.log('Forwarding calls on error', discartItems.length);\n\n        _this.forward(discartItems);\n\n        if (items.length === 0) return;\n      } // Encode multicall\n\n\n      let encodedCall;\n\n      try {\n        encodedCall = _this.multicallInterface.encodeFunctionData(_this.multicallInterface.getFunction('multiCall'), [callParams]);\n      } catch (_unused3) {\n        _this.forward(items);\n\n        return;\n      } // Forward single multicall rpc call\n\n\n      const reqId = getRandomInt(); // TODO: fix types below..\n\n      const res = await safeSolve( // @ts-ignore\n      promisify(next)({\n        id: reqId,\n        jsonrpc: JsonRpcVersion,\n        method: JsonRpcMethod.ethCall,\n        params: [{\n          to: _this.options.contract,\n          value: 0,\n          data: encodedCall\n        }, BigNumber.isBigNumber(blockTag) ? blockTag.toNumber() : blockTag] // @ts-ignore\n\n      }), e => ({\n        jsonrpc: JsonRpcVersion,\n        id: reqId,\n        result: undefined,\n        error: e\n      })); // Error calling multicall\n      // Forward all calls to middleware\n      // @ts-ignore\n\n      if (res.error) {\n        return _this.forward(items);\n      } // Decode result from multicall\n\n\n      let decoded;\n\n      try {\n        // @ts-ignore\n        decoded = _this.multicallInterface.decodeFunctionResult(_this.multicallInterface.getFunction('multiCall'), res.result);\n      } catch (_unused4) {\n        _this.forward(items);\n\n        return;\n      } // Send results for each request\n      // errors fallback through the middleware\n\n\n      if (_this.options.verbose) console.log('Got response for', items.length);\n      items.forEach((item, index) => {\n        if (!decoded[0][index]) {\n          _this.forward(item);\n        } else {\n          switch (item.request.method) {\n            case JsonRpcMethod.ethCall:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: decoded[1][index]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetCode:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['bytes'], decoded[1][index])[0]\n              });\n              break;\n\n            case JsonRpcMethod.ethGetBalance:\n              item.callback(undefined, {\n                jsonrpc: item.request.jsonrpc,\n                id: item.request.id,\n                result: ethers.utils.defaultAbiCoder.decode(['uint256'], decoded[1][index])[0]\n              });\n              break;\n          }\n        }\n      });\n    };\n\n    this.options = options ? _extends({}, Multicall.DefaultOptions, options) : Multicall.DefaultOptions;\n    if (this.options.batchSize <= 0) throw new Error(`Invalid batch size of ${this.options.batchSize}`);\n  }\n\n  forward(entries) {\n    if (Array.isArray(entries)) {\n      entries.forEach(e => e.next(e.request, e.callback));\n    } else {\n      entries.next(entries.request, entries.callback);\n    }\n  }\n\n  static isMulticall(cand) {\n    return cand && cand.handle !== undefined && cand.conf !== undefined && Multicall.isMulticallOptions(cand.options);\n  }\n\n  static isMulticallOptions(cand) {\n    return cand !== undefined && cand.batchSize !== undefined && cand.timeWindow !== undefined && cand.contract !== undefined;\n  }\n\n}\nMulticall.DefaultOptions = _extends({}, DefaultMulticallOptions);\n\nconst ProxyMethods = ['getNetwork', 'getBlockNumber', 'getGasPrice', 'getTransactionCount', 'getStorageAt', 'sendTransaction', 'estimateGas', 'getBlock', 'getTransaction', 'getTransactionReceipt', 'getLogs', 'emit', 'litenerCount', 'addListener', 'removeListener', 'waitForTransaction', 'detectNetwork', 'getBlockWithTransactions'];\nclass MulticallProvider extends ethers.providers.BaseProvider {\n  constructor(provider, multicall) {\n    var _this;\n\n    super(provider.getNetwork());\n    _this = this;\n    this.provider = provider;\n    this.multicall = void 0;\n    this.listenerCount = this.provider.listenerCount;\n\n    this.getResolver = async function (name) {\n      const provider = _this.provider;\n\n      if (provider.getResolver) {\n        const ogResolver = await provider.getResolver(await name);\n        if (!ogResolver) return null;\n        return new ethers.providers.Resolver(_this, ogResolver.address, ogResolver.name);\n      }\n\n      return provider.getResolver(await name);\n    };\n\n    this.next = async function (req, callback) {\n      try {\n        switch (req.method) {\n          case JsonRpcMethod.ethCall:\n            _this.callback(req, callback, await _this.provider.call(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetCode:\n            _this.callback(req, callback, await _this.provider.getCode(req.params[0], req.params[1]));\n\n            break;\n\n          case JsonRpcMethod.ethGetBalance:\n            _this.callback(req, callback, await _this.provider.getBalance(req.params[0], req.params[1]));\n\n            break;\n        }\n      } catch (e) {\n        _this.callback(req, callback, undefined, e);\n      }\n    };\n\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n    ProxyMethods.forEach(m => {\n      if (provider[m] !== undefined) {\n\n        this[m] = (...args) => provider[m](...args);\n      }\n    });\n  }\n\n  callback(req, callback, resp, err) {\n    callback(err, {\n      jsonrpc: JsonRpcVersion,\n      id: req.id,\n      result: resp,\n      error: err\n    });\n  }\n\n  async call(transaction, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethCall, transaction, blockTag);\n  }\n\n  async getCode(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetCode, addressOrName, blockTag);\n  }\n\n  async getBalance(addressOrName, blockTag) {\n    return this.rpcCall(JsonRpcMethod.ethGetBalance, addressOrName, blockTag);\n  }\n\n  async rpcCall(method, ...params) {\n    const reqId = getRandomInt();\n    const resp = await promisify(this.multicall.handle)(this.next, {\n      jsonrpc: JsonRpcVersion,\n      id: reqId,\n      method: method,\n      params: params\n    });\n    return resp.result;\n  }\n\n}\n\nclass MulticallExternalProvider {\n  constructor(provider, multicall) {\n    this.provider = provider;\n    this.multicall = void 0;\n    this.multicall = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n\n    if (provider.send) {\n      const next = async function next(req, callback) {\n        provider.send(req, callback);\n      };\n\n      this.send = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n\n    if (provider.sendAsync) {\n      const next = async function next(req, callback) {\n        provider.sendAsync(req, callback);\n      };\n\n      this.sendAsync = (request, callback) => {\n        this.multicall.handle(next, request, callback);\n      };\n    }\n  }\n\n  get isMetaMask() {\n    return this.provider.isMetaMask;\n  }\n\n  get isStatus() {\n    return this.provider.isStatus;\n  }\n\n}\n\nconst multicallMiddleware = multicall => next => {\n  const lib = Multicall.isMulticall(multicall) ? multicall : new Multicall(multicall);\n  return (request, callback) => {\n    return lib.handle(next, request, callback);\n  };\n};\n\nvar index = /*#__PURE__*/Object.freeze({\n  __proto__: null,\n  ProxyMethods: ProxyMethods,\n  MulticallProvider: MulticallProvider,\n  MulticallExternalProvider: MulticallExternalProvider,\n  multicallMiddleware: multicallMiddleware\n});\n\nexport { Multicall, index as providers };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}