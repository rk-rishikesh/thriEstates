{"ast":null,"code":"import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n  constructor() {\n    super();\n    this.store = new Map();\n  }\n\n  async *blocks() {\n    for (const [cidStr, bytes] of this.store.entries()) {\n      yield {\n        cid: CID.parse(cidStr),\n        bytes\n      };\n    }\n  }\n\n  put(cid, bytes) {\n    this.store.set(cid.toString(), bytes);\n    return Promise.resolve();\n  }\n\n  get(cid) {\n    const bytes = this.store.get(cid.toString());\n\n    if (!bytes) {\n      throw new Error(`block with cid ${cid.toString()} no found`);\n    }\n\n    return Promise.resolve(bytes);\n  }\n\n  has(cid) {\n    return Promise.resolve(this.store.has(cid.toString()));\n  }\n\n  close() {\n    this.store.clear();\n    return Promise.resolve();\n  }\n\n}","map":{"version":3,"names":["CID","BaseBlockstore","MemoryBlockStore","constructor","store","Map","blocks","cidStr","bytes","entries","cid","parse","put","set","toString","Promise","resolve","get","Error","has","close","clear"],"sources":["C:/Users/rishi/contract-poc/ThriEstate/Brandvilla/node_modules/nft.storage/node_modules/ipfs-car/dist/esm/blockstore/memory.js"],"sourcesContent":["import { CID } from 'multiformats';\nimport { BaseBlockstore } from 'blockstore-core';\nexport class MemoryBlockStore extends BaseBlockstore {\n    constructor() {\n        super();\n        this.store = new Map();\n    }\n    async *blocks() {\n        for (const [cidStr, bytes] of this.store.entries()) {\n            yield { cid: CID.parse(cidStr), bytes };\n        }\n    }\n    put(cid, bytes) {\n        this.store.set(cid.toString(), bytes);\n        return Promise.resolve();\n    }\n    get(cid) {\n        const bytes = this.store.get(cid.toString());\n        if (!bytes) {\n            throw new Error(`block with cid ${cid.toString()} no found`);\n        }\n        return Promise.resolve(bytes);\n    }\n    has(cid) {\n        return Promise.resolve(this.store.has(cid.toString()));\n    }\n    close() {\n        this.store.clear();\n        return Promise.resolve();\n    }\n}\n"],"mappings":"AAAA,SAASA,GAAT,QAAoB,cAApB;AACA,SAASC,cAAT,QAA+B,iBAA/B;AACA,OAAO,MAAMC,gBAAN,SAA+BD,cAA/B,CAA8C;EACjDE,WAAW,GAAG;IACV;IACA,KAAKC,KAAL,GAAa,IAAIC,GAAJ,EAAb;EACH;;EACY,OAANC,MAAM,GAAG;IACZ,KAAK,MAAM,CAACC,MAAD,EAASC,KAAT,CAAX,IAA8B,KAAKJ,KAAL,CAAWK,OAAX,EAA9B,EAAoD;MAChD,MAAM;QAAEC,GAAG,EAAEV,GAAG,CAACW,KAAJ,CAAUJ,MAAV,CAAP;QAA0BC;MAA1B,CAAN;IACH;EACJ;;EACDI,GAAG,CAACF,GAAD,EAAMF,KAAN,EAAa;IACZ,KAAKJ,KAAL,CAAWS,GAAX,CAAeH,GAAG,CAACI,QAAJ,EAAf,EAA+BN,KAA/B;IACA,OAAOO,OAAO,CAACC,OAAR,EAAP;EACH;;EACDC,GAAG,CAACP,GAAD,EAAM;IACL,MAAMF,KAAK,GAAG,KAAKJ,KAAL,CAAWa,GAAX,CAAeP,GAAG,CAACI,QAAJ,EAAf,CAAd;;IACA,IAAI,CAACN,KAAL,EAAY;MACR,MAAM,IAAIU,KAAJ,CAAW,kBAAiBR,GAAG,CAACI,QAAJ,EAAe,WAA3C,CAAN;IACH;;IACD,OAAOC,OAAO,CAACC,OAAR,CAAgBR,KAAhB,CAAP;EACH;;EACDW,GAAG,CAACT,GAAD,EAAM;IACL,OAAOK,OAAO,CAACC,OAAR,CAAgB,KAAKZ,KAAL,CAAWe,GAAX,CAAeT,GAAG,CAACI,QAAJ,EAAf,CAAhB,CAAP;EACH;;EACDM,KAAK,GAAG;IACJ,KAAKhB,KAAL,CAAWiB,KAAX;IACA,OAAON,OAAO,CAACC,OAAR,EAAP;EACH;;AA3BgD"},"metadata":{},"sourceType":"module"}