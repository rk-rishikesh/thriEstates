{"ast":null,"code":"import { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\n\nconst getChainId = chainId => {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n\n  return ethers.BigNumber.from(chainId).toNumber();\n};\n\nconst maybeChainId = chainId => {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\n\nconst getAuthNetwork = networks => {\n  return networks.find(network => network.isAuthChain);\n};\n\nconst isValidNetworkConfig = function (networkConfig) {\n  let raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  let skipRelayerCheck = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n  if (!networkConfig) throw new Error(`invalid network config: empty config`);\n  const configs = [];\n\n  if (Array.isArray(networkConfig)) {\n    configs.push(...networkConfig);\n  } else {\n    configs.push(networkConfig);\n  }\n\n  if (configs.length === 0) {\n    if (raise) throw new Error(`invalid network config: empty config`);\n    return false;\n  } // Ensure distinct chainId configs\n\n\n  const chainIds = configs.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  } // Downcase all network names\n\n\n  configs.forEach(c => c.name = c.name.toLowerCase()); // Ensure distinct network names\n\n  const names = configs.map(c => c.name).sort();\n  const nameDupes = names.filter((c, i) => names.indexOf(c) !== i);\n\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate network names ${nameDupes}`);\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n\n  let defaultChain = false;\n  let authChain = false;\n\n  for (let i = 0; i < configs.length; i++) {\n    const c = configs[i];\n\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: rpcUrl or provider must be provided`);\n      return false;\n    }\n\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: relayer must be provided`);\n        return false;\n      }\n    }\n\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: DefaultChain is already set by another config`);\n        return false;\n      }\n\n      defaultChain = true;\n    }\n\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: AuthChain is already set by another config`);\n      }\n\n      authChain = true;\n    }\n  }\n\n  if (!defaultChain) {\n    if (raise) throw new Error(`invalid network config: DefaultChain must be set`);\n    return false;\n  }\n\n  if (!authChain) {\n    if (raise) throw new Error(`invalid network config: AuthChain must be set`);\n    return false;\n  }\n\n  return true;\n};\n\nconst ensureValidNetworks = function (networks) {\n  let skipRelayerCheck = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\n\nconst ensureUniqueNetworks = function (networks) {\n  let raise = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n  const chainIds = networks.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  }\n\n  return true;\n};\n\nconst updateNetworkConfig = (src, dest) => {\n  if (!src || !dest) return;\n\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n\n};\n\nconst createNetworkConfig = (networks, defaultChainId, vars) => {\n  let config = [];\n\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n\n  if (defaultChainId) {\n    config.forEach(n => n.isDefaultChain = false);\n    const mainNetwork = config.filter(n => n.chainId === defaultChainId);\n\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(`defaultChainId ${defaultChainId} cannot be found in network list`);\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n\n  return ensureValidNetworks(sortNetworks(config));\n};\n\nconst findNetworkConfig = (networks, chainId) => {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      const id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(n => n.chainId === id);\n    } else {\n      return networks.find(n => n.name === chainId);\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(n => n.chainId === chainId);\n  } else if (chainId.chainId) {\n    return networks.find(n => n.chainId === chainId.chainId);\n  } else {\n    return undefined;\n  }\n};\n\nconst checkNetworkConfig = (network, chainId) => {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\n\nconst networksIndex = networks => {\n  const index = {};\n\n  for (let i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\n\nconst sortNetworks = networks => {\n  if (!networks) {\n    return [];\n  }\n\n  const config = networks.sort((a, b) => {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  const defaultConfigIdx = config.findIndex(c => c.isDefaultChain);\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  const authConfigIdx = config.findIndex(c => c.isAuthChain && c.isDefaultChain !== true);\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\n\nlet ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\n\nconst networks = {\n  [ChainId.MAINNET]: {\n    chainId: ChainId.MAINNET,\n    name: 'mainnet',\n    title: 'Ethereum',\n    blockExplorer: {\n      name: 'Etherscan',\n      rootUrl: 'https://etherscan.io/'\n    }\n  },\n  [ChainId.ROPSTEN]: {\n    chainId: ChainId.ROPSTEN,\n    name: 'ropsten',\n    title: 'Ropsten',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Ropsten)',\n      rootUrl: 'https://ropsten.etherscan.io/'\n    }\n  },\n  [ChainId.RINKEBY]: {\n    chainId: ChainId.RINKEBY,\n    name: 'rinkeby',\n    title: 'Rinkeby',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Rinkeby)',\n      rootUrl: 'https://rinkeby.etherscan.io/'\n    }\n  },\n  [ChainId.GOERLI]: {\n    chainId: ChainId.GOERLI,\n    name: 'goerli',\n    title: 'Goerli',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Goerli)',\n      rootUrl: 'https://goerli.etherscan.io/'\n    }\n  },\n  [ChainId.KOVAN]: {\n    chainId: ChainId.KOVAN,\n    name: 'kovan',\n    title: 'Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Kovan)',\n      rootUrl: 'https://kovan.etherscan.io/'\n    }\n  },\n  [ChainId.POLYGON]: {\n    chainId: ChainId.POLYGON,\n    name: 'polygon',\n    title: 'Polygon',\n    blockExplorer: {\n      name: 'Polygonscan',\n      rootUrl: 'https://polygonscan.com/'\n    }\n  },\n  [ChainId.POLYGON_MUMBAI]: {\n    chainId: ChainId.POLYGON_MUMBAI,\n    name: 'mumbai',\n    title: 'Polygon Mumbai',\n    testnet: true,\n    blockExplorer: {\n      name: 'Polygonscan (Mumbai)',\n      rootUrl: 'https://mumbai.polygonscan.com/'\n    }\n  },\n  [ChainId.BSC]: {\n    chainId: ChainId.BSC,\n    name: 'bsc',\n    title: 'BNB Smart Chain',\n    blockExplorer: {\n      name: 'BSCScan',\n      rootUrl: 'https://bscscan.com/'\n    }\n  },\n  [ChainId.BSC_TESTNET]: {\n    chainId: ChainId.BSC_TESTNET,\n    name: 'bsc-testnet',\n    title: 'BNB Smart Chain Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'BSCScan (Testnet)',\n      rootUrl: 'https://testnet.bscscan.com/'\n    }\n  },\n  [ChainId.OPTIMISM]: {\n    chainId: ChainId.OPTIMISM,\n    name: 'optimism',\n    title: 'Optimism',\n    blockExplorer: {\n      name: 'Etherscan (Optimism)',\n      rootUrl: 'https://optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.OPTIMISM_TESTNET]: {\n    chainId: ChainId.OPTIMISM_TESTNET,\n    name: 'optimism-testnet',\n    title: 'Optimistic Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Optimism Testnet)',\n      rootUrl: 'https://kovan-optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM]: {\n    chainId: ChainId.ARBITRUM,\n    name: 'arbitrum',\n    title: 'Arbitrum',\n    blockExplorer: {\n      name: 'Arbiscan',\n      rootUrl: 'https://arbiscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM_TESTNET]: {\n    chainId: ChainId.ARBITRUM_TESTNET,\n    name: 'arbitrum-testnet',\n    title: 'Arbitrum Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Arbiscan (Testnet)',\n      rootUrl: 'https://testnet.arbiscan.io/'\n    }\n  },\n  [ChainId.AVALANCHE]: {\n    chainId: ChainId.AVALANCHE,\n    name: 'avalanche',\n    title: 'Avalanche',\n    blockExplorer: {\n      name: 'Snowtrace',\n      rootUrl: 'https://snowtrace.io/'\n    }\n  },\n  [ChainId.AVALANCHE_TESTNET]: {\n    chainId: ChainId.AVALANCHE_TESTNET,\n    name: 'avalanche-testnet',\n    title: 'Avalanche Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Snowtrace (Testnet)',\n      rootUrl: 'https://testnet.snowtrace.io/'\n    }\n  },\n  [ChainId.FANTOM]: {\n    chainId: ChainId.FANTOM,\n    name: 'fantom',\n    title: 'Fantom',\n    blockExplorer: {\n      name: 'FTMScan',\n      rootUrl: 'https://ftmscan.com/'\n    }\n  },\n  [ChainId.FANTOM_TESTNET]: {\n    chainId: ChainId.FANTOM_TESTNET,\n    name: 'fantom-testnet',\n    title: 'Fantom Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'FTMScan (Testnet)',\n      rootUrl: 'https://testnet.ftmscan.com/'\n    }\n  },\n  [ChainId.GNOSIS]: {\n    chainId: ChainId.GNOSIS,\n    name: 'gnosis',\n    title: 'Gnosis Chain',\n    blockExplorer: {\n      name: 'Gnosis Chain Explorer',\n      rootUrl: 'https://blockscout.com/xdai/mainnet/'\n    }\n  },\n  [ChainId.AURORA]: {\n    chainId: ChainId.AURORA,\n    name: 'aurora',\n    title: 'Aurora',\n    blockExplorer: {\n      name: 'Aurora Explorer',\n      rootUrl: 'https://aurorascan.dev/'\n    }\n  },\n  [ChainId.AURORA_TESTNET]: {\n    chainId: ChainId.AURORA_TESTNET,\n    name: 'aurora-testnet',\n    title: 'Aurora Testnet',\n    blockExplorer: {\n      name: 'Aurora Explorer (Testnet)',\n      rootUrl: 'https://testnet.aurorascan.dev/'\n    }\n  }\n};\nconst mainnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.MAINNET], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/mainnet`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/mainnet`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.POLYGON], {\n  rpcUrl: 'https://rpc-mainnet.matic.network',\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/matic`)\n  },\n  isAuthChain: true\n})], 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nconst testnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.RINKEBY], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/rinkeby`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/rinkeby`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.GOERLI], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/goerli`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/goerli`)\n  },\n  isAuthChain: true\n})], undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n}); // WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\n\nconst sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\nconst JsonRpcVersion = '2.0';\n\nclass JsonRpcRouter {\n  constructor(middlewares, sender) {\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n\n  setMiddleware(middlewares) {\n    this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n  }\n\n  sendAsync(request, callback, chainId) {\n    try {\n      this.handler(request, callback, chainId);\n    } catch (err) {\n      callback(err, undefined);\n    }\n  } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n  //   return new EthersWeb3Provider(this.sender, network)\n  // }\n\n\n}\n\nconst createJsonRpcMiddlewareStack = (middlewares, handler) => {\n  if (middlewares.length === 0) return handler;\n\n  const toMiddleware = v => {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n\n  let chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n\n  for (let i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n\n  return chain;\n};\n\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\n\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\n\nlet _nextId = 0;\n\nclass JsonRpcSender {\n  constructor(provider, defaultChainId) {\n    this.send = void 0;\n    this.request = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsync = (request, callback, chainId) => {\n      this.send(request.method, request.params, chainId || this.defaultChainId).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.defaultChainId = defaultChainId;\n\n    if (isJsonRpcProvider(provider)) {\n      // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n      this.send = provider.send.bind(provider);\n    } else if (isJsonRpcHandler(provider)) {\n      this.send = (method, params, chainId) => {\n        return new Promise((resolve, reject) => {\n          provider.sendAsync({\n            // TODO: really shouldn't have to set these here?\n            jsonrpc: JsonRpcVersion,\n            id: ++_nextId,\n            method,\n            params\n          }, (error, response) => {\n            if (error) {\n              reject(error);\n            } else if (response) {\n              resolve(response.result);\n            } else {\n              resolve(undefined);\n            }\n          }, chainId || this.defaultChainId);\n        });\n      };\n    } else {\n      this.send = provider;\n    }\n\n    this.request = (request, chainId) => {\n      return this.send(request.method, request.params, chainId);\n    };\n  }\n\n}\n\nclass JsonRpcExternalProvider {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.sendAsync = (request, callback) => {\n      this.provider.send(request.method, request.params).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.send = this.sendAsync;\n  }\n\n}\n\nclass AllowProvider {\n  constructor(isAllowedFunc) {\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = request => true;\n    }\n\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n  setIsAllowedFunc(fn) {\n    this.isAllowedFunc = fn;\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n}\n\nconst allowProviderMiddleware = isAllowed => next => {\n  return (request, callback, chainId) => {\n    // ensure precondition is met or do not allow the request to continue\n    if (!isAllowed(request)) {\n      throw new Error('allowProvider middleware precondition is unmet.');\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nclass CachedProvider {\n  constructor(defaultChainId) {\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Respond early with cached result\n        if (this.cachableJsonRpcMethods.includes(request.method)) {\n          const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n          const result = this.getCacheValue(key);\n\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n\n        next(request, (error, response, chainId) => {\n          // Store result in cache and continue\n          if (this.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n              this.setCacheValue(key, response.result);\n            }\n          } // Exec next handler\n\n\n          callback(error, response);\n        }, chainId || this.defaultChainId);\n      };\n    };\n\n    this.cacheKey = (method, params, chainId) => {\n      let key = '';\n\n      if (chainId) {\n        key = `${chainId}:${method}:`;\n      } else {\n        key = `:${method}:`;\n      }\n\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n\n      return key + JSON.stringify(params);\n    };\n\n    this.getCache = () => this.cache;\n\n    this.setCache = cache => {\n      this.cache = cache;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    };\n\n    this.getCacheValue = key => {\n      return this.cache[key];\n    };\n\n    this.setCacheValue = (key, value) => {\n      this.cache[key] = value;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback(key, value);\n      }\n    };\n\n    this.clearCache = () => {\n      this.cache = {};\n    };\n\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n\n  onUpdate(callback) {\n    this.onUpdateCallback = callback;\n  }\n\n}\n\nclass EagerProvider {\n  constructor(props) {\n    this.props = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        const {\n          id,\n          method\n        } = request;\n\n        switch (method) {\n          case 'net_version':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: `${this.props.chainId}`\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_chainId':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: ethers.utils.hexlify(this.props.chainId)\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_accounts':\n            if (this.props.accountAddress) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: [ethers.utils.getAddress(this.props.accountAddress)]\n              });\n              return;\n            }\n\n            break;\n\n          case 'sequence_getWalletContext':\n            if (this.props.walletContext) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: this.props.walletContext\n              });\n              return;\n            }\n\n            break;\n        }\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.props = props;\n  }\n\n}\n\nconst exceptionProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    next(request, (error, response) => {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst loggingProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    const chainIdLabel = chainId ? ` chainId:${chainId}` : '';\n    logger.info(`[provider request]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params);\n    next(request, (error, response) => {\n      if (error) {\n        logger.warn(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `error:`, error);\n      } else {\n        logger.info(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `response:`, response);\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst networkProviderMiddleware = getChainId => next => {\n  return (request, callback, chainId) => {\n    const networkChainId = getChainId(request);\n    const {\n      id,\n      method\n    } = request;\n\n    switch (method) {\n      case 'net_version':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: `${networkChainId}`\n        });\n        return;\n\n      case 'eth_chainId':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: ethers.utils.hexlify(networkChainId)\n        });\n        return;\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nconst SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\n\nclass SigningProvider {\n  constructor(provider) {\n    this.provider = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Forward signing requests to the signing provider\n        if (SignerJsonRpcMethods.includes(request.method)) {\n          this.provider.sendAsync(request, callback, chainId);\n          return;\n        } // Continue to next handler\n\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.provider = provider;\n  }\n\n}\n\nclass PublicProvider {\n  constructor(rpcUrl) {\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', ...SignerJsonRpcMethods];\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback) => {\n        // When provider is configured, send non-private methods to our local public provider\n        if (this.provider && !this.privateJsonRpcMethods.includes(request.method)) {\n          this.provider.send(request.method, request.params).then(r => {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(e => callback(e));\n          return;\n        } // Continue to next handler\n\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n\n  getRpcUrl() {\n    return this.rpcUrl;\n  }\n\n  setRpcUrl(rpcUrl) {\n    if (!rpcUrl || rpcUrl === '') {\n      this.rpcUrl = undefined;\n      this.provider = undefined;\n    } else {\n      this.rpcUrl = rpcUrl;\n      this.provider = new JsonRpcProvider(rpcUrl);\n    }\n  }\n\n}\n\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };","map":{"version":3,"names":["urlClean","logger","ethers","JsonRpcProvider","_extends","Object","assign","target","i","arguments","length","source","key","prototype","hasOwnProperty","call","apply","isNetworkConfig","cand","chainId","undefined","name","rpcUrl","relayer","getChainId","BigNumber","from","toNumber","maybeChainId","getAuthNetwork","networks","find","network","isAuthChain","isValidNetworkConfig","networkConfig","raise","skipRelayerCheck","Error","configs","Array","isArray","push","chainIds","map","c","sort","dupes","filter","indexOf","forEach","toLowerCase","names","nameDupes","defaultChain","authChain","provider","isDefaultChain","ensureValidNetworks","ensureUniqueNetworks","updateNetworkConfig","src","dest","ensAddress","createNetworkConfig","defaultChainId","vars","config","n","mainNetwork","sortNetworks","findNetworkConfig","startsWith","id","checkNetworkConfig","networksIndex","index","a","b","defaultConfigIdx","findIndex","splice","authConfigIdx","ChainId","MAINNET","title","blockExplorer","rootUrl","ROPSTEN","testnet","RINKEBY","GOERLI","KOVAN","POLYGON","POLYGON_MUMBAI","BSC","BSC_TESTNET","OPTIMISM","OPTIMISM_TESTNET","ARBITRUM","ARBITRUM_TESTNET","AVALANCHE","AVALANCHE_TESTNET","FANTOM","FANTOM_TESTNET","GNOSIS","AURORA","AURORA_TESTNET","mainnetNetworks","baseRpcUrl","url","baseRelayerUrl","testnetNetworks","sequenceContext","factory","mainModule","mainModuleUpgradable","guestModule","sequenceUtils","libs","requireFreshSigner","JsonRpcVersion","JsonRpcRouter","constructor","middlewares","sender","handler","setMiddleware","createJsonRpcMiddlewareStack","sendAsync","request","callback","err","toMiddleware","v","sendAsyncMiddleware","chain","isJsonRpcProvider","send","defaultUrl","detectNetwork","getSigner","perform","isJsonRpcHandler","_nextId","JsonRpcSender","method","params","then","r","jsonrpc","result","catch","e","bind","Promise","resolve","reject","error","response","JsonRpcExternalProvider","AllowProvider","isAllowedFunc","allowProviderMiddleware","setIsAllowedFunc","fn","isAllowed","next","CachedProvider","cachableJsonRpcMethods","cache","onUpdateCallback","includes","cacheKey","getCacheValue","setCacheValue","JSON","stringify","getCache","setCache","value","clearCache","onUpdate","EagerProvider","props","utils","hexlify","accountAddress","getAddress","walletContext","exceptionProviderMiddleware","message","loggingProviderMiddleware","chainIdLabel","info","warn","networkProviderMiddleware","networkChainId","SignerJsonRpcMethods","SigningProvider","PublicProvider","privateJsonRpcMethods","debug","setRpcUrl","getRpcUrl"],"sources":["C:/Users/rishi/contract-poc/ThriEstate/Brandvilla/node_modules/@0xsequence/network/dist/0xsequence-network.esm.js"],"sourcesContent":["import { urlClean, logger } from '@0xsequence/utils';\nimport { ethers } from 'ethers';\nimport { JsonRpcProvider } from '@ethersproject/providers';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction isNetworkConfig(cand) {\n  return cand && cand.chainId !== undefined && cand.name !== undefined && cand.rpcUrl !== undefined && cand.relayer !== undefined;\n}\nconst getChainId = chainId => {\n  if (typeof chainId === 'number') {\n    return chainId;\n  }\n\n  if (chainId.chainId) {\n    return chainId.chainId;\n  }\n\n  return ethers.BigNumber.from(chainId).toNumber();\n};\nconst maybeChainId = chainId => {\n  if (!chainId) return undefined;\n  return getChainId(chainId);\n};\nconst getAuthNetwork = networks => {\n  return networks.find(network => network.isAuthChain);\n};\nconst isValidNetworkConfig = (networkConfig, raise = false, skipRelayerCheck = false) => {\n  if (!networkConfig) throw new Error(`invalid network config: empty config`);\n  const configs = [];\n\n  if (Array.isArray(networkConfig)) {\n    configs.push(...networkConfig);\n  } else {\n    configs.push(networkConfig);\n  }\n\n  if (configs.length === 0) {\n    if (raise) throw new Error(`invalid network config: empty config`);\n    return false;\n  } // Ensure distinct chainId configs\n\n\n  const chainIds = configs.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  } // Downcase all network names\n\n\n  configs.forEach(c => c.name = c.name.toLowerCase()); // Ensure distinct network names\n\n  const names = configs.map(c => c.name).sort();\n  const nameDupes = names.filter((c, i) => names.indexOf(c) !== i);\n\n  if (nameDupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate network names ${nameDupes}`);\n    return false;\n  } // Ensure rpcUrl or provider is specified\n  // Ensure relayerUrl or relayer is specified\n  // Ensure one default chain\n  // Ensure one auth chain\n\n\n  let defaultChain = false;\n  let authChain = false;\n\n  for (let i = 0; i < configs.length; i++) {\n    const c = configs[i];\n\n    if ((!c.rpcUrl || c.rpcUrl === '') && !c.provider) {\n      if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: rpcUrl or provider must be provided`);\n      return false;\n    }\n\n    if (!skipRelayerCheck) {\n      if (!c.relayer) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: relayer must be provided`);\n        return false;\n      }\n    }\n\n    if (c.isDefaultChain) {\n      if (defaultChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: DefaultChain is already set by another config`);\n        return false;\n      }\n\n      defaultChain = true;\n    }\n\n    if (c.isAuthChain) {\n      if (authChain) {\n        if (raise) throw new Error(`invalid network config for chainId ${c.chainId}: AuthChain is already set by another config`);\n      }\n\n      authChain = true;\n    }\n  }\n\n  if (!defaultChain) {\n    if (raise) throw new Error(`invalid network config: DefaultChain must be set`);\n    return false;\n  }\n\n  if (!authChain) {\n    if (raise) throw new Error(`invalid network config: AuthChain must be set`);\n    return false;\n  }\n\n  return true;\n};\nconst ensureValidNetworks = (networks, skipRelayerCheck = false) => {\n  isValidNetworkConfig(networks, true, skipRelayerCheck);\n  return networks;\n};\nconst ensureUniqueNetworks = (networks, raise = true) => {\n  const chainIds = networks.map(c => c.chainId).sort();\n  const dupes = chainIds.filter((c, i) => chainIds.indexOf(c) !== i);\n\n  if (dupes.length > 0) {\n    if (raise) throw new Error(`invalid network config: duplicate chainIds ${dupes}`);\n    return false;\n  }\n\n  return true;\n};\nconst updateNetworkConfig = (src, dest) => {\n  if (!src || !dest) return;\n\n  if (!src.chainId && !src.name) {\n    throw new Error('failed to update network config: source config is missing chainId or name');\n  }\n\n  if (src.chainId !== dest.chainId && src.name !== dest.name) {\n    throw new Error('failed to update network config: one of chainId or name must match');\n  }\n\n  if (src.rpcUrl) {\n    dest.rpcUrl = src.rpcUrl;\n    dest.provider = undefined;\n  }\n\n  if (src.provider) {\n    dest.provider = src.provider;\n  }\n\n  if (src.relayer) {\n    dest.relayer = src.relayer;\n  }\n\n  if (src.ensAddress) {\n    dest.ensAddress = src.ensAddress;\n  } // NOTE: we do not set default or auth chain from here\n  // if (src.isDefaultChain) {\n  //   dest.isDefaultChain = src.isDefaultChain\n  // }\n  // if (src.isAuthChain) {\n  //   dest.isAuthChain = src.isAuthChain\n  // }\n\n};\nconst createNetworkConfig = (networks, defaultChainId, vars) => {\n  let config = [];\n\n  if (typeof networks === 'function' && vars) {\n    config = networks(vars);\n  } else {\n    config = networks;\n  }\n\n  if (defaultChainId) {\n    config.forEach(n => n.isDefaultChain = false);\n    const mainNetwork = config.filter(n => n.chainId === defaultChainId);\n\n    if (!mainNetwork || mainNetwork.length === 0) {\n      throw new Error(`defaultChainId ${defaultChainId} cannot be found in network list`);\n    } else {\n      mainNetwork[0].isDefaultChain = true;\n    }\n  }\n\n  return ensureValidNetworks(sortNetworks(config));\n};\nconst findNetworkConfig = (networks, chainId) => {\n  if (typeof chainId === 'string') {\n    if (chainId.startsWith('0x')) {\n      const id = ethers.BigNumber.from(chainId).toNumber();\n      return networks.find(n => n.chainId === id);\n    } else {\n      return networks.find(n => n.name === chainId);\n    }\n  } else if (typeof chainId === 'number') {\n    return networks.find(n => n.chainId === chainId);\n  } else if (chainId.chainId) {\n    return networks.find(n => n.chainId === chainId.chainId);\n  } else {\n    return undefined;\n  }\n};\nconst checkNetworkConfig = (network, chainId) => {\n  if (!network) return false;\n  if (network.name === chainId) return true;\n  if (network.chainId === chainId) return true;\n  return false;\n};\nconst networksIndex = networks => {\n  const index = {};\n\n  for (let i = 0; i < networks.length; i++) {\n    index[networks[i].name] = networks[i];\n  }\n\n  return index;\n}; // TODO: we should remove sortNetworks in the future but this is a breaking change for dapp integrations on older versions <-> wallet\n// sortNetworks orders the network config list by: defaultChain, authChain, ..rest by chainId ascending numbers\n\nconst sortNetworks = networks => {\n  if (!networks) {\n    return [];\n  }\n\n  const config = networks.sort((a, b) => {\n    if (a.chainId === b.chainId) return 0;\n    return a.chainId < b.chainId ? -1 : 1;\n  }); // DefaultChain goes first\n\n  const defaultConfigIdx = config.findIndex(c => c.isDefaultChain);\n  if (defaultConfigIdx > 0) config.splice(0, 0, config.splice(defaultConfigIdx, 1)[0]); // AuthChain goes second\n\n  const authConfigIdx = config.findIndex(c => c.isAuthChain && c.isDefaultChain !== true);\n  if (authConfigIdx > 0) config.splice(1, 0, config.splice(authConfigIdx, 1)[0]);\n  return config;\n};\n\nlet ChainId;\n\n(function (ChainId) {\n  ChainId[ChainId[\"MAINNET\"] = 1] = \"MAINNET\";\n  ChainId[ChainId[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  ChainId[ChainId[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  ChainId[ChainId[\"GOERLI\"] = 5] = \"GOERLI\";\n  ChainId[ChainId[\"KOVAN\"] = 42] = \"KOVAN\";\n  ChainId[ChainId[\"POLYGON\"] = 137] = \"POLYGON\";\n  ChainId[ChainId[\"POLYGON_MUMBAI\"] = 80001] = \"POLYGON_MUMBAI\";\n  ChainId[ChainId[\"BSC\"] = 56] = \"BSC\";\n  ChainId[ChainId[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  ChainId[ChainId[\"OPTIMISM\"] = 10] = \"OPTIMISM\";\n  ChainId[ChainId[\"OPTIMISM_TESTNET\"] = 69] = \"OPTIMISM_TESTNET\";\n  ChainId[ChainId[\"ARBITRUM\"] = 42161] = \"ARBITRUM\";\n  ChainId[ChainId[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  ChainId[ChainId[\"AVALANCHE\"] = 43114] = \"AVALANCHE\";\n  ChainId[ChainId[\"AVALANCHE_TESTNET\"] = 43113] = \"AVALANCHE_TESTNET\";\n  ChainId[ChainId[\"FANTOM\"] = 250] = \"FANTOM\";\n  ChainId[ChainId[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  ChainId[ChainId[\"GNOSIS\"] = 100] = \"GNOSIS\";\n  ChainId[ChainId[\"AURORA\"] = 1313161554] = \"AURORA\";\n  ChainId[ChainId[\"AURORA_TESTNET\"] = 1313161556] = \"AURORA_TESTNET\";\n})(ChainId || (ChainId = {}));\n\nconst networks = {\n  [ChainId.MAINNET]: {\n    chainId: ChainId.MAINNET,\n    name: 'mainnet',\n    title: 'Ethereum',\n    blockExplorer: {\n      name: 'Etherscan',\n      rootUrl: 'https://etherscan.io/'\n    }\n  },\n  [ChainId.ROPSTEN]: {\n    chainId: ChainId.ROPSTEN,\n    name: 'ropsten',\n    title: 'Ropsten',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Ropsten)',\n      rootUrl: 'https://ropsten.etherscan.io/'\n    }\n  },\n  [ChainId.RINKEBY]: {\n    chainId: ChainId.RINKEBY,\n    name: 'rinkeby',\n    title: 'Rinkeby',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Rinkeby)',\n      rootUrl: 'https://rinkeby.etherscan.io/'\n    }\n  },\n  [ChainId.GOERLI]: {\n    chainId: ChainId.GOERLI,\n    name: 'goerli',\n    title: 'Goerli',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Goerli)',\n      rootUrl: 'https://goerli.etherscan.io/'\n    }\n  },\n  [ChainId.KOVAN]: {\n    chainId: ChainId.KOVAN,\n    name: 'kovan',\n    title: 'Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Kovan)',\n      rootUrl: 'https://kovan.etherscan.io/'\n    }\n  },\n  [ChainId.POLYGON]: {\n    chainId: ChainId.POLYGON,\n    name: 'polygon',\n    title: 'Polygon',\n    blockExplorer: {\n      name: 'Polygonscan',\n      rootUrl: 'https://polygonscan.com/'\n    }\n  },\n  [ChainId.POLYGON_MUMBAI]: {\n    chainId: ChainId.POLYGON_MUMBAI,\n    name: 'mumbai',\n    title: 'Polygon Mumbai',\n    testnet: true,\n    blockExplorer: {\n      name: 'Polygonscan (Mumbai)',\n      rootUrl: 'https://mumbai.polygonscan.com/'\n    }\n  },\n  [ChainId.BSC]: {\n    chainId: ChainId.BSC,\n    name: 'bsc',\n    title: 'BNB Smart Chain',\n    blockExplorer: {\n      name: 'BSCScan',\n      rootUrl: 'https://bscscan.com/'\n    }\n  },\n  [ChainId.BSC_TESTNET]: {\n    chainId: ChainId.BSC_TESTNET,\n    name: 'bsc-testnet',\n    title: 'BNB Smart Chain Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'BSCScan (Testnet)',\n      rootUrl: 'https://testnet.bscscan.com/'\n    }\n  },\n  [ChainId.OPTIMISM]: {\n    chainId: ChainId.OPTIMISM,\n    name: 'optimism',\n    title: 'Optimism',\n    blockExplorer: {\n      name: 'Etherscan (Optimism)',\n      rootUrl: 'https://optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.OPTIMISM_TESTNET]: {\n    chainId: ChainId.OPTIMISM_TESTNET,\n    name: 'optimism-testnet',\n    title: 'Optimistic Kovan',\n    testnet: true,\n    blockExplorer: {\n      name: 'Etherscan (Optimism Testnet)',\n      rootUrl: 'https://kovan-optimistic.etherscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM]: {\n    chainId: ChainId.ARBITRUM,\n    name: 'arbitrum',\n    title: 'Arbitrum',\n    blockExplorer: {\n      name: 'Arbiscan',\n      rootUrl: 'https://arbiscan.io/'\n    }\n  },\n  [ChainId.ARBITRUM_TESTNET]: {\n    chainId: ChainId.ARBITRUM_TESTNET,\n    name: 'arbitrum-testnet',\n    title: 'Arbitrum Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Arbiscan (Testnet)',\n      rootUrl: 'https://testnet.arbiscan.io/'\n    }\n  },\n  [ChainId.AVALANCHE]: {\n    chainId: ChainId.AVALANCHE,\n    name: 'avalanche',\n    title: 'Avalanche',\n    blockExplorer: {\n      name: 'Snowtrace',\n      rootUrl: 'https://snowtrace.io/'\n    }\n  },\n  [ChainId.AVALANCHE_TESTNET]: {\n    chainId: ChainId.AVALANCHE_TESTNET,\n    name: 'avalanche-testnet',\n    title: 'Avalanche Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'Snowtrace (Testnet)',\n      rootUrl: 'https://testnet.snowtrace.io/'\n    }\n  },\n  [ChainId.FANTOM]: {\n    chainId: ChainId.FANTOM,\n    name: 'fantom',\n    title: 'Fantom',\n    blockExplorer: {\n      name: 'FTMScan',\n      rootUrl: 'https://ftmscan.com/'\n    }\n  },\n  [ChainId.FANTOM_TESTNET]: {\n    chainId: ChainId.FANTOM_TESTNET,\n    name: 'fantom-testnet',\n    title: 'Fantom Testnet',\n    testnet: true,\n    blockExplorer: {\n      name: 'FTMScan (Testnet)',\n      rootUrl: 'https://testnet.ftmscan.com/'\n    }\n  },\n  [ChainId.GNOSIS]: {\n    chainId: ChainId.GNOSIS,\n    name: 'gnosis',\n    title: 'Gnosis Chain',\n    blockExplorer: {\n      name: 'Gnosis Chain Explorer',\n      rootUrl: 'https://blockscout.com/xdai/mainnet/'\n    }\n  },\n  [ChainId.AURORA]: {\n    chainId: ChainId.AURORA,\n    name: 'aurora',\n    title: 'Aurora',\n    blockExplorer: {\n      name: 'Aurora Explorer',\n      rootUrl: 'https://aurorascan.dev/'\n    }\n  },\n  [ChainId.AURORA_TESTNET]: {\n    chainId: ChainId.AURORA_TESTNET,\n    name: 'aurora-testnet',\n    title: 'Aurora Testnet',\n    blockExplorer: {\n      name: 'Aurora Explorer (Testnet)',\n      rootUrl: 'https://testnet.aurorascan.dev/'\n    }\n  }\n};\nconst mainnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.MAINNET], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/mainnet`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/mainnet`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.POLYGON], {\n  rpcUrl: 'https://rpc-mainnet.matic.network',\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/matic`)\n  },\n  isAuthChain: true\n})], 1, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\nconst testnetNetworks = createNetworkConfig(vars => [_extends({}, networks[ChainId.RINKEBY], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/rinkeby`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/rinkeby`)\n  },\n  isDefaultChain: true\n}), _extends({}, networks[ChainId.GOERLI], {\n  ensAddress: '0x00000000000C2E074eC69A0dFb2997BA6C7d2e1e',\n  rpcUrl: urlClean(`${vars.baseRpcUrl}/goerli`),\n  relayer: {\n    url: urlClean(`${vars.baseRelayerUrl}/goerli`)\n  },\n  isAuthChain: true\n})], undefined, {\n  baseRpcUrl: 'https://nodes.sequence.app',\n  baseRelayerUrl: 'https://relayers.sequence.app'\n});\n\n// WalletContext is the module addresses deployed on a network, aka the context / environment\n// of the Sequence Smart Wallet system on Ethereum.\n// sequenceContext are the deployed addresses of modules available on public networks.\nconst sequenceContext = {\n  factory: '0xf9D09D634Fb818b05149329C1dcCFAeA53639d96',\n  mainModule: '0xd01F11855bCcb95f88D7A48492F66410d4637313',\n  mainModuleUpgradable: '0x7EFE6cE415956c5f80C6530cC6cc81b4808F6118',\n  guestModule: '0x02390F3E6E5FD1C6786CB78FD3027C117a9955A7',\n  sequenceUtils: '0xd130B43062D875a4B7aF3f8fc036Bc6e9D3E1B3E',\n  libs: {\n    requireFreshSigner: '0xE6B9B21C077F382333220a072e4c44280b873907'\n  }\n};\n\nconst JsonRpcVersion = '2.0';\n\nclass JsonRpcRouter {\n  constructor(middlewares, sender) {\n    this.sender = void 0;\n    this.handler = void 0;\n    this.sender = sender;\n\n    if (middlewares) {\n      this.setMiddleware(middlewares);\n    }\n  }\n\n  setMiddleware(middlewares) {\n    this.handler = createJsonRpcMiddlewareStack(middlewares, this.sender.sendAsync);\n  }\n\n  sendAsync(request, callback, chainId) {\n    try {\n      this.handler(request, callback, chainId);\n    } catch (err) {\n      callback(err, undefined);\n    }\n  } // createWeb3Provider(network?: Networkish): EthersWeb3Provider {\n  //   return new EthersWeb3Provider(this.sender, network)\n  // }\n\n\n}\nconst createJsonRpcMiddlewareStack = (middlewares, handler) => {\n  if (middlewares.length === 0) return handler;\n\n  const toMiddleware = v => {\n    if (v.sendAsyncMiddleware) {\n      return v.sendAsyncMiddleware;\n    } else {\n      return v;\n    }\n  };\n\n  let chain;\n  chain = toMiddleware(middlewares[middlewares.length - 1])(handler);\n\n  for (let i = middlewares.length - 2; i >= 0; i--) {\n    chain = toMiddleware(middlewares[i])(chain);\n  }\n\n  return chain;\n};\n\nfunction isJsonRpcProvider(cand) {\n  return cand !== undefined && cand.send !== undefined && cand.constructor.defaultUrl !== undefined && cand.detectNetwork !== undefined && cand.getSigner !== undefined && cand.perform !== undefined;\n}\nfunction isJsonRpcHandler(cand) {\n  return cand !== undefined && cand.sendAsync !== undefined;\n}\n\nlet _nextId = 0;\nclass JsonRpcSender {\n  constructor(provider, defaultChainId) {\n    this.send = void 0;\n    this.request = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsync = (request, callback, chainId) => {\n      this.send(request.method, request.params, chainId || this.defaultChainId).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.defaultChainId = defaultChainId;\n\n    if (isJsonRpcProvider(provider)) {\n      // we can ignore defaultChainId for JsonRpcProviders as they are already chain-bound\n      this.send = provider.send.bind(provider);\n    } else if (isJsonRpcHandler(provider)) {\n      this.send = (method, params, chainId) => {\n        return new Promise((resolve, reject) => {\n          provider.sendAsync({\n            // TODO: really shouldn't have to set these here?\n            jsonrpc: JsonRpcVersion,\n            id: ++_nextId,\n            method,\n            params\n          }, (error, response) => {\n            if (error) {\n              reject(error);\n            } else if (response) {\n              resolve(response.result);\n            } else {\n              resolve(undefined);\n            }\n          }, chainId || this.defaultChainId);\n        });\n      };\n    } else {\n      this.send = provider;\n    }\n\n    this.request = (request, chainId) => {\n      return this.send(request.method, request.params, chainId);\n    };\n  }\n\n}\nclass JsonRpcExternalProvider {\n  constructor(provider) {\n    this.provider = provider;\n\n    this.sendAsync = (request, callback) => {\n      this.provider.send(request.method, request.params).then(r => {\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: request.id,\n          result: r\n        });\n      }).catch(e => {\n        callback(e, undefined);\n      });\n    };\n\n    this.send = this.sendAsync;\n  }\n\n}\n\nclass AllowProvider {\n  constructor(isAllowedFunc) {\n    this.sendAsyncMiddleware = void 0;\n    this.isAllowedFunc = void 0;\n\n    if (isAllowedFunc) {\n      this.isAllowedFunc = isAllowedFunc;\n    } else {\n      this.isAllowedFunc = request => true;\n    }\n\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n  setIsAllowedFunc(fn) {\n    this.isAllowedFunc = fn;\n    this.sendAsyncMiddleware = allowProviderMiddleware(this.isAllowedFunc);\n  }\n\n}\nconst allowProviderMiddleware = isAllowed => next => {\n  return (request, callback, chainId) => {\n    // ensure precondition is met or do not allow the request to continue\n    if (!isAllowed(request)) {\n      throw new Error('allowProvider middleware precondition is unmet.');\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nclass CachedProvider {\n  constructor(defaultChainId) {\n    this.cachableJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', 'sequence_getWalletContext', 'sequence_getNetworks'];\n    this.cache = void 0;\n    this.onUpdateCallback = void 0;\n    this.defaultChainId = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Respond early with cached result\n        if (this.cachableJsonRpcMethods.includes(request.method)) {\n          const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n          const result = this.getCacheValue(key);\n\n          if (result && result !== '') {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: result\n            });\n            return;\n          }\n        } // Continue down the handler chain\n\n\n        next(request, (error, response, chainId) => {\n          // Store result in cache and continue\n          if (this.cachableJsonRpcMethods.includes(request.method)) {\n            if (response && response.result) {\n              const key = this.cacheKey(request.method, request.params, chainId || this.defaultChainId);\n              this.setCacheValue(key, response.result);\n            }\n          } // Exec next handler\n\n\n          callback(error, response);\n        }, chainId || this.defaultChainId);\n      };\n    };\n\n    this.cacheKey = (method, params, chainId) => {\n      let key = '';\n\n      if (chainId) {\n        key = `${chainId}:${method}:`;\n      } else {\n        key = `:${method}:`;\n      }\n\n      if (!params || params.length === 0) {\n        return key + '[]';\n      }\n\n      return key + JSON.stringify(params);\n    };\n\n    this.getCache = () => this.cache;\n\n    this.setCache = cache => {\n      this.cache = cache;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback();\n      }\n    };\n\n    this.getCacheValue = key => {\n      return this.cache[key];\n    };\n\n    this.setCacheValue = (key, value) => {\n      this.cache[key] = value;\n\n      if (this.onUpdateCallback) {\n        this.onUpdateCallback(key, value);\n      }\n    };\n\n    this.clearCache = () => {\n      this.cache = {};\n    };\n\n    this.cache = {};\n    this.defaultChainId = defaultChainId;\n  }\n\n  onUpdate(callback) {\n    this.onUpdateCallback = callback;\n  }\n\n}\n\nclass EagerProvider {\n  constructor(props) {\n    this.props = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        const {\n          id,\n          method\n        } = request;\n\n        switch (method) {\n          case 'net_version':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: `${this.props.chainId}`\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_chainId':\n            if (this.props.chainId) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: ethers.utils.hexlify(this.props.chainId)\n              });\n              return;\n            }\n\n            break;\n\n          case 'eth_accounts':\n            if (this.props.accountAddress) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: [ethers.utils.getAddress(this.props.accountAddress)]\n              });\n              return;\n            }\n\n            break;\n\n          case 'sequence_getWalletContext':\n            if (this.props.walletContext) {\n              callback(undefined, {\n                jsonrpc: '2.0',\n                id: id,\n                result: this.props.walletContext\n              });\n              return;\n            }\n\n            break;\n        }\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.props = props;\n  }\n\n}\n\nconst exceptionProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    next(request, (error, response) => {\n      if (!error && response && response.error) {\n        if (typeof response.error === 'string') {\n          throw new Error(response.error);\n        } else {\n          throw new Error(response.error.message);\n        }\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst loggingProviderMiddleware = next => {\n  return (request, callback, chainId) => {\n    const chainIdLabel = chainId ? ` chainId:${chainId}` : '';\n    logger.info(`[provider request]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params);\n    next(request, (error, response) => {\n      if (error) {\n        logger.warn(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `error:`, error);\n      } else {\n        logger.info(`[provider response]${chainIdLabel} id:${request.id} method:${request.method} params:`, request.params, `response:`, response);\n      }\n\n      callback(error, response);\n    }, chainId);\n  };\n};\n\nconst networkProviderMiddleware = getChainId => next => {\n  return (request, callback, chainId) => {\n    const networkChainId = getChainId(request);\n    const {\n      id,\n      method\n    } = request;\n\n    switch (method) {\n      case 'net_version':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: `${networkChainId}`\n        });\n        return;\n\n      case 'eth_chainId':\n        callback(undefined, {\n          jsonrpc: '2.0',\n          id: id,\n          result: ethers.utils.hexlify(networkChainId)\n        });\n        return;\n    } // request is allowed. keep going..\n\n\n    next(request, callback, chainId);\n  };\n};\n\nconst SignerJsonRpcMethods = ['personal_sign', 'eth_sign', 'eth_signTypedData', 'eth_signTypedData_v4', 'eth_sendTransaction', 'eth_sendRawTransaction', 'sequence_getWalletContext', 'sequence_getWalletConfig', 'sequence_getWalletState', 'sequence_getNetworks', 'sequence_updateConfig', 'sequence_publishConfig', 'sequence_estimateGasLimits', 'sequence_gasRefundOptions', 'sequence_getNonce', 'sequence_relay', 'eth_decrypt', 'eth_getEncryptionPublicKey', 'wallet_addEthereumChain', 'wallet_switchEthereumChain', 'wallet_registerOnboarding', 'wallet_watchAsset', 'wallet_scanQRCode'];\nclass SigningProvider {\n  constructor(provider) {\n    this.provider = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback, chainId) => {\n        // Forward signing requests to the signing provider\n        if (SignerJsonRpcMethods.includes(request.method)) {\n          this.provider.sendAsync(request, callback, chainId);\n          return;\n        } // Continue to next handler\n\n\n        next(request, callback, chainId);\n      };\n    };\n\n    this.provider = provider;\n  }\n\n}\n\nclass PublicProvider {\n  constructor(rpcUrl) {\n    this.privateJsonRpcMethods = ['net_version', 'eth_chainId', 'eth_accounts', ...SignerJsonRpcMethods];\n    this.provider = void 0;\n    this.rpcUrl = void 0;\n\n    this.sendAsyncMiddleware = next => {\n      return (request, callback) => {\n        // When provider is configured, send non-private methods to our local public provider\n        if (this.provider && !this.privateJsonRpcMethods.includes(request.method)) {\n          this.provider.send(request.method, request.params).then(r => {\n            callback(undefined, {\n              jsonrpc: '2.0',\n              id: request.id,\n              result: r\n            });\n          }).catch(e => callback(e));\n          return;\n        } // Continue to next handler\n\n\n        logger.debug('[public-provider] sending request to signer window', request.method);\n        next(request, callback);\n      };\n    };\n\n    if (rpcUrl) {\n      this.setRpcUrl(rpcUrl);\n    }\n  }\n\n  getRpcUrl() {\n    return this.rpcUrl;\n  }\n\n  setRpcUrl(rpcUrl) {\n    if (!rpcUrl || rpcUrl === '') {\n      this.rpcUrl = undefined;\n      this.provider = undefined;\n    } else {\n      this.rpcUrl = rpcUrl;\n      this.provider = new JsonRpcProvider(rpcUrl);\n    }\n  }\n\n}\n\nexport { AllowProvider, CachedProvider, ChainId, EagerProvider, JsonRpcExternalProvider, JsonRpcRouter, JsonRpcSender, JsonRpcVersion, PublicProvider, SigningProvider, allowProviderMiddleware, checkNetworkConfig, createJsonRpcMiddlewareStack, createNetworkConfig, ensureUniqueNetworks, ensureValidNetworks, exceptionProviderMiddleware, findNetworkConfig, getAuthNetwork, getChainId, isJsonRpcHandler, isJsonRpcProvider, isNetworkConfig, isValidNetworkConfig, loggingProviderMiddleware, mainnetNetworks, maybeChainId, networkProviderMiddleware, networks, networksIndex, sequenceContext, sortNetworks, testnetNetworks, updateNetworkConfig };\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}