import { NetworkConfig, WalletContext, ChainIdLike } from '@0xsequence/network';
import { WalletConfig, WalletState } from '@0xsequence/config';
import { Web3Provider, Web3Signer } from './provider';
import { ProxyMessageChannelPort } from './transports';
import { WalletSession, ProviderEventTypes, ConnectOptions, OpenWalletIntent, ConnectDetails } from './types';
import { ItemStore } from './utils';
import { WalletUtils } from './utils/index';
import { Runtime } from 'webextension-polyfill-ts';
export interface WalletProvider {
    connect(options?: ConnectOptions): Promise<ConnectDetails>;
    disconnect(): void;
    isConnected(): boolean;
    getSession(): WalletSession | undefined;
    getAddress(): Promise<string>;
    getNetworks(chainId?: ChainIdLike): Promise<NetworkConfig[]>;
    getChainId(): Promise<number>;
    getAuthChainId(): Promise<number>;
    isOpened(): boolean;
    openWallet(path?: string, intent?: OpenWalletIntent, networkId?: string | number): Promise<boolean>;
    closeWallet(): void;
    getProvider(chainId?: ChainIdLike): Web3Provider | undefined;
    getSigner(chainId?: ChainIdLike): Web3Signer;
    getWalletContext(): Promise<WalletContext>;
    getWalletConfig(chainId?: ChainIdLike): Promise<WalletConfig[]>;
    getWalletState(chainId?: ChainIdLike): Promise<WalletState[]>;
    isDeployed(chainId?: ChainIdLike): Promise<boolean>;
    getProviderConfig(): ProviderConfig;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    utils: WalletUtils;
}
export declare class Wallet implements WalletProvider {
    utils: WalletUtils;
    private config;
    private session?;
    private connectedSites;
    private transport;
    private networks;
    private providers;
    constructor(network?: string | number, config?: Partial<ProviderConfig>);
    private init;
    loadSession: () => Promise<WalletSession | undefined>;
    connect: (options?: ConnectOptions | undefined) => Promise<ConnectDetails>;
    addConnectedSite(origin: string | undefined): Promise<void>;
    removeConnectedSite(origin: string): Promise<void>;
    getConnectedSites(): Promise<string[] | undefined>;
    isSiteConnected(origin: string | undefined): Promise<boolean>;
    authorize: (options?: ConnectOptions | undefined) => Promise<ConnectDetails>;
    disconnect(): void;
    getProviderConfig(): ProviderConfig;
    isOpened(): boolean;
    isConnected(): boolean;
    getSession: () => WalletSession | undefined;
    getAddress: () => Promise<string>;
    getNetworks: (chainId?: ChainIdLike | undefined) => Promise<NetworkConfig[]>;
    getChainId: () => Promise<number>;
    getAuthChainId: () => Promise<number>;
    openWallet: (path?: string | undefined, intent?: OpenWalletIntent | undefined, networkId?: string | number | undefined) => Promise<boolean>;
    closeWallet: () => void;
    getProvider(chainId?: ChainIdLike): Web3Provider | undefined;
    getAuthProvider(): Promise<Web3Provider>;
    getAuthNetwork(): Promise<NetworkConfig>;
    getAllProviders(): {
        [chainId: number]: Web3Provider;
    };
    getSigner(chainId?: ChainIdLike): Web3Signer;
    getAuthSigner(): Promise<Web3Signer>;
    getWalletConfig(chainId?: ChainIdLike): Promise<WalletConfig[]>;
    getWalletState(chainId?: ChainIdLike): Promise<WalletState[]>;
    getWalletContext(): Promise<WalletContext>;
    isDeployed(chainId?: ChainIdLike): Promise<boolean>;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    private saveSession;
    private useSession;
    private useAccountAddress;
    private useNetworks;
    private clearSession;
}
export interface ProviderConfig {
    localStorage?: ItemStore;
    walletAppURL: string;
    networks?: Partial<NetworkConfig>[];
    networkRpcUrl?: string;
    defaultNetworkId?: string | number;
    transports?: {
        windowTransport?: {
            enabled: boolean;
        };
        proxyTransport?: {
            enabled: boolean;
            appPort?: ProxyMessageChannelPort;
        };
        extensionTransport?: {
            enabled: boolean;
            runtime: Runtime.Static;
        };
    };
    walletContext?: WalletContext;
}
export declare const DefaultProviderConfig: ProviderConfig;
export declare const initWallet: (network?: string | number | undefined, config?: Partial<ProviderConfig> | undefined) => Promise<Wallet>;
export declare const getWallet: () => Wallet;
