import { ProviderMessageRequest, ProviderMessageResponse, ProviderMessageRequestHandler, MessageToSign, ProviderRpcError, ConnectOptions, ConnectDetails, PromptConnectDetails, WalletSession, OpenWalletIntent, ProviderEventTypes } from '../types';
import { ExternalProvider } from '@ethersproject/providers';
import { NetworkConfig, JsonRpcHandler, JsonRpcRequest, JsonRpcResponseCallback } from '@0xsequence/network';
import { Signer } from '@0xsequence/wallet';
import { TransactionRequest } from '@0xsequence/transactions';
export interface WalletSignInOptions {
    connect?: boolean;
    mainnetNetworks?: NetworkConfig[];
    testnetNetworks?: NetworkConfig[];
    defaultNetworkId?: string | number;
}
export declare class WalletRequestHandler implements ExternalProvider, JsonRpcHandler, ProviderMessageRequestHandler {
    private signer;
    private signerReadyCallbacks;
    private prompter;
    private mainnetNetworks;
    private testnetNetworks;
    private _openIntent?;
    private _connectOptions?;
    private _defaultNetworkId?;
    private _chainId?;
    private events;
    constructor(signer: Signer | null | undefined, prompter: WalletUserPrompter | null, mainnetNetworks: NetworkConfig[], testnetNetworks?: NetworkConfig[]);
    signIn(signer: Signer | null, options?: WalletSignInOptions): Promise<void>;
    signOut(): void;
    signerReset(): void;
    signerReady(timeout?: number): Promise<void>;
    connect(options?: ConnectOptions): Promise<ConnectDetails>;
    promptConnect: (options?: ConnectOptions | undefined) => Promise<ConnectDetails>;
    sendMessageRequest(message: ProviderMessageRequest): Promise<ProviderMessageResponse>;
    sendAsync: (request: JsonRpcRequest, callback: JsonRpcResponseCallback, chainId?: number | undefined) => Promise<void>;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    getAddress(): Promise<string>;
    getChainId(): Promise<number>;
    get openIntent(): OpenWalletIntent | undefined;
    setOpenIntent(intent: OpenWalletIntent | undefined): void;
    get connectOptions(): ConnectOptions | undefined;
    setConnectOptions(options: ConnectOptions | undefined): void;
    get defaultNetworkId(): string | number | undefined;
    setDefaultNetwork(chainId: string | number, notifyNetworks?: boolean): Promise<number | undefined>;
    getNetworks(jsonRpcResponse?: boolean): Promise<NetworkConfig[]>;
    walletSession(): Promise<WalletSession | undefined>;
    notifyConnect(connectDetails: ConnectDetails, origin?: string): void;
    notifyDisconnect(origin?: string): void;
    notifyNetworks(networks?: NetworkConfig[]): Promise<void>;
    notifyWalletContext(): Promise<void>;
    notifyClose(error?: ProviderRpcError): void;
    isSignedIn: () => Promise<boolean>;
    getSigner: () => Promise<Signer | null>;
    setSigner(signer: Signer | null | undefined): void;
    private handleConfirmWalletDeployPrompt;
}
export interface WalletUserPrompter {
    promptConnect(options?: ConnectOptions): Promise<PromptConnectDetails>;
    promptSignMessage(message: MessageToSign, options?: ConnectOptions): Promise<string>;
    promptSignTransaction(txn: TransactionRequest, chaindId?: number, options?: ConnectOptions): Promise<string>;
    promptSendTransaction(txn: TransactionRequest, chaindId?: number, options?: ConnectOptions): Promise<string>;
    promptConfirmWalletDeploy(chainId: number, options?: ConnectOptions): Promise<boolean>;
}
