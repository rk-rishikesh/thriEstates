import { WalletTransport, ProviderMessage, ProviderMessageRequest, ProviderMessageResponse, ProviderRpcError, InitState, ConnectDetails, WalletSession, TransportSession } from '../types';
import { WalletRequestHandler } from './wallet-request-handler';
import { NetworkConfig, WalletContext, JsonRpcRequest, JsonRpcResponseCallback } from '@0xsequence/network';
export declare abstract class BaseWalletTransport implements WalletTransport {
    protected walletRequestHandler: WalletRequestHandler;
    protected _sessionId: string;
    protected _registered: boolean;
    protected _init: InitState;
    protected _initNonce: string;
    protected _initCallback?: (error?: string) => void;
    protected appOrigin?: string;
    constructor(walletRequestHandler: WalletRequestHandler);
    get registered(): boolean;
    register(): void;
    unregister(): void;
    sendAsync: (request: JsonRpcRequest, callback: JsonRpcResponseCallback, chainId?: number | undefined) => Promise<never>;
    handleMessage: (message: ProviderMessage<any>) => Promise<void>;
    sendMessageRequest: (message: ProviderMessageRequest) => Promise<ProviderMessageResponse>;
    sendMessage(message: ProviderMessage<any>): void;
    notifyOpen(openInfo: {
        chainId?: string;
        sessionId?: string;
        session?: WalletSession;
        error?: string;
    }): void;
    notifyClose(error?: ProviderRpcError): void;
    notifyConnect(connectDetails: ConnectDetails): void;
    notifyDisconnect(error?: ProviderRpcError): void;
    notifyAccountsChanged(accounts: string[], origin?: string): void;
    notifyChainChanged(chainIdHex: string): void;
    notifyNetworks(networks: NetworkConfig[]): void;
    notifyWalletContext(walletContext: WalletContext): void;
    protected isValidInitAck(message: ProviderMessage<any>): boolean;
    private init;
    protected open: ({ sessionId, intent, networkId }: TransportSession) => Promise<boolean>;
    private saveTransportSession;
    protected getCachedTransportSession: () => Promise<TransportSession | null>;
}
