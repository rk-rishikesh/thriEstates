import { ProviderMessage, ProviderTransport, ProviderEventTypes, ProviderMessageRequest, ProviderMessageResponse, WalletSession, OpenWalletIntent, ConnectDetails } from '../../types';
import { JsonRpcRequest, JsonRpcResponseCallback } from '@0xsequence/network';
export declare class MuxMessageProvider implements ProviderTransport {
    private messageProviders;
    private provider;
    constructor(...messageProviders: ProviderTransport[]);
    add(...messageProviders: ProviderTransport[]): void;
    register: () => void;
    unregister: () => void;
    openWallet: (path?: string | undefined, intent?: OpenWalletIntent | undefined, networkId?: string | number | undefined) => void;
    closeWallet(): void;
    isOpened(): boolean;
    isConnected(): boolean;
    on<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    once<K extends keyof ProviderEventTypes>(event: K, fn: ProviderEventTypes[K]): void;
    emit<K extends keyof ProviderEventTypes>(event: K, ...args: Parameters<ProviderEventTypes[K]>): boolean;
    sendAsync: (request: JsonRpcRequest, callback: JsonRpcResponseCallback, chainId?: number | undefined) => Promise<void>;
    sendMessage(message: ProviderMessage<any>): void;
    sendMessageRequest: (message: ProviderMessageRequest) => Promise<ProviderMessageResponse>;
    handleMessage(message: ProviderMessage<any>): void;
    waitUntilOpened: () => Promise<WalletSession | undefined>;
    waitUntilConnected: () => Promise<ConnectDetails>;
}
