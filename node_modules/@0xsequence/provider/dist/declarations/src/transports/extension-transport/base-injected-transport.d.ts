import { EventEmitter2 as EventEmitter } from 'eventemitter2';
import { ProviderMessageResponseCallback, ProviderMessageRequest, ProviderMessageResponse } from '../../types';
export interface Stream {
    on(ev: string | symbol, fn: (...args: any[]) => void): void;
    writable: boolean;
    write(chunk: any, cb?: (error: Error | null | undefined) => void): boolean;
}
export declare abstract class BaseInjectedTransport extends EventEmitter {
    private stream;
    protected responseCallbacks: Map<number, ProviderMessageResponseCallback>;
    private _messageIdx;
    protected nextMessageIdx: () => number;
    constructor(stream: Stream);
    private handleMessage;
    protected sendMessageRequest: (message: ProviderMessageRequest) => Promise<ProviderMessageResponse>;
    private sendMessage;
}
