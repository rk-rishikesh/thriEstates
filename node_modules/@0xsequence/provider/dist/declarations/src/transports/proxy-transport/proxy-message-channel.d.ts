import { ProviderMessage, ProviderMessageTransport, ProviderEventTypes, TypedEventEmitter } from '../../types';
export declare class ProxyMessageChannel {
    app: ProxyMessageChannelPort;
    wallet: ProxyMessageChannelPort;
    constructor();
}
export declare class ProxyMessageChannelPort implements ProviderMessageTransport {
    conn: ProviderMessageTransport;
    events: TypedEventEmitter<ProxyEventTypes>;
    handleMessage: (message: ProviderMessage<any>) => void;
    sendMessage: (message: ProviderMessage<any>) => void;
    on<K extends keyof ProxyEventTypes>(event: K, fn: ProxyEventTypes[K]): void;
    once<K extends keyof ProxyEventTypes>(event: K, fn: ProxyEventTypes[K]): void;
}
export declare type ProxyEventTypes = Pick<ProviderEventTypes, 'open' | 'close' | 'connect' | 'disconnect'>;
