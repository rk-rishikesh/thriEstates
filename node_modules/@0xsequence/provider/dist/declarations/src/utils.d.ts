import { ethers, BigNumberish, BytesLike } from 'ethers';
import { WalletContext } from '@0xsequence/network';
import { WalletConfig, DecodedSignature } from '@0xsequence/config';
import { TypedData } from '@0xsequence/utils';
import { Web3Provider } from './provider';
import { Signer } from '@0xsequence/wallet';
export declare const messageToBytes: (message: BytesLike) => Uint8Array;
export declare const prefixEIP191Message: (message: BytesLike) => Uint8Array;
export declare const isValidSignature: (address: string, digest: Uint8Array, sig: string, provider: Web3Provider | ethers.providers.Web3Provider, chainId?: number | undefined, walletContext?: WalletContext | undefined) => Promise<boolean | undefined>;
export declare const isValidMessageSignature: (address: string, message: string | Uint8Array, signature: string, provider: Web3Provider | ethers.providers.Web3Provider, chainId?: number | undefined, walletContext?: WalletContext | undefined) => Promise<boolean | undefined>;
export declare const isValidTypedDataSignature: (address: string, typedData: TypedData, signature: string, provider: Web3Provider | ethers.providers.Web3Provider, chainId?: number | undefined, walletContext?: WalletContext | undefined) => Promise<boolean | undefined>;
export declare const recoverWalletConfig: (address: string, digest: BytesLike, signature: string | DecodedSignature, chainId: BigNumberish, walletContext?: WalletContext | undefined) => Promise<WalletConfig>;
export declare const isBrowserExtension: () => boolean;
/**
 * Returns the status of a signer's wallet on given chain by checking wallet deployment and config status
 *
 * @param {Signer} signer
 * @param {number} chainId
 * @return {Promise<boolean>} Promise that returns true if the wallet is up to date, false otherwise
 */
export declare const isWalletUpToDate: (signer: Signer, chainId: number) => Promise<boolean>;
export interface ItemStore {
    getItem(key: string): Promise<string | null>;
    setItem(key: string, value: string): Promise<void>;
    removeItem(key: string): Promise<void>;
}
export declare class LocalStorage {
    private static _instance;
    private constructor();
    static getInstance(): ItemStore;
    static use(instance: ItemStore): void;
}
export declare class LocalStore<T extends Object = string> {
    def?: T | undefined;
    readonly key: string;
    constructor(key: string, def?: T | undefined);
    get(): Promise<T | undefined>;
    set(val: T | undefined): void;
    del(): void;
}
