import { ethers, Signer as AbstractSigner } from 'ethers';
import { WalletContext } from '@0xsequence/network';
export interface WalletConfig {
    threshold: number;
    signers: {
        weight: number;
        address: string;
    }[];
    address?: string;
    chainId?: number;
}
export interface WalletState {
    context: WalletContext;
    config?: WalletConfig;
    address: string;
    chainId: number;
    deployed: boolean;
    imageHash: string;
    lastImageHash?: string;
    published?: boolean;
}
export declare const createWalletConfig: (threshold: number, signers: {
    weight: number;
    signer: string | AbstractSigner;
}[]) => Promise<WalletConfig>;
export declare const isUsableConfig: (config: WalletConfig) => boolean;
export declare const isValidConfigSigners: (config: WalletConfig, signers: string[]) => boolean;
export declare const addressOf: (salt: WalletConfig | string, context: WalletContext, ignoreAddress?: boolean) => string;
export declare const imageHash: (config: WalletConfig) => string;
export declare const sortConfig: (config: WalletConfig) => WalletConfig;
export declare const isConfigEqual: (a: WalletConfig, b: WalletConfig) => boolean;
export declare const compareAddr: (a: string, b: string) => number;
export declare function editConfig(config: WalletConfig, args: {
    threshold?: ethers.BigNumberish;
    set?: {
        weight: ethers.BigNumberish;
        address: string;
    }[];
    del?: {
        address: string;
    }[];
}): WalletConfig;
export declare function genConfig(threshold: ethers.BigNumberish, signers: {
    weight: ethers.BigNumberish;
    address: string;
}[]): WalletConfig;
