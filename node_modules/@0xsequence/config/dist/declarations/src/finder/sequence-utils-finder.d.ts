
import { ethers } from 'ethers';
import { imageHash, WalletConfig } from '..';
import { ConfigFinder } from './config-finder';
import { WalletContext } from '@0xsequence/network';
export declare class SequenceUtilsFinder implements ConfigFinder {
    authProvider: ethers.providers.Provider;
    constructor(authProvider: ethers.providers.Provider);
    findCurrentConfig: (args: {
        address: string;
        provider: ethers.providers.Provider;
        context: WalletContext;
        knownConfigs?: WalletConfig[];
        ignoreIndex?: boolean;
        requireIndex?: boolean;
        skipCache?: boolean;
    }) => Promise<{
        config: WalletConfig | undefined;
    }>;
    findLastWalletOfInitialSigner: (args: {
        signer: string;
        provider: ethers.providers.Provider;
        context: WalletContext;
        ignoreIndex?: boolean;
        requireIndex?: boolean;
    }) => Promise<{
        wallet: string | undefined;
    }>;
    findConfigForImageHash: (context: WalletContext, image: string, knownConfigs?: WalletConfig[], skipCache?: boolean) => Promise<WalletConfig | undefined>;
    findCurrentImageHash: (context: WalletContext, provider: ethers.providers.Provider, address: string, knownConfigs?: WalletConfig[], skipCache?: boolean | undefined) => Promise<{
        imageHash?: string;
        config?: WalletConfig;
    }>;
    private findLatestLog;
    private findFirstLog;
}
