import { SequenceAPIClient } from '@0xsequence/api';
import { ConfigFinder, WalletConfig } from '@0xsequence/config';
import { Indexer } from '@0xsequence/indexer';
import { SequenceMetadataClient } from '@0xsequence/metadata';
import { ChainIdLike, NetworkConfig, WalletContext } from '@0xsequence/network';
import { Account } from '@0xsequence/wallet';
import { ethers, Signer as AbstractSigner } from 'ethers';
export declare type SessionMeta = {
    name: string;
    expiration?: number;
};
export declare type SessionJWT = {
    token: string;
    expiration: number;
};
declare type SessionJWTPromise = {
    token: Promise<string>;
    expiration: number;
};
export interface SessionDump {
    config: WalletConfig;
    context: WalletContext;
    jwt?: SessionJWT;
    metadata: SessionMeta;
}
export declare const DEFAULT_SESSION_EXPIRATION: number;
export declare const LONG_SESSION_EXPIRATION = 30000000;
export declare class Session {
    sequenceApiUrl: string;
    sequenceMetadataUrl: string;
    private networks;
    config: WalletConfig;
    context: WalletContext;
    account: Account;
    metadata: SessionMeta;
    private readonly authProvider;
    _initialAuthRequest: Promise<SequenceAPIClient>;
    _jwt: SessionJWTPromise | undefined;
    private readonly proofStrings;
    private onAuthCallbacks;
    private apiClient;
    private metadataClient;
    private indexerClients;
    constructor(sequenceApiUrl: string, sequenceMetadataUrl: string, networks: NetworkConfig[], config: WalletConfig, context: WalletContext, account: Account, metadata: SessionMeta, authProvider: ethers.providers.JsonRpcProvider, jwt?: SessionJWT);
    get name(): string;
    get expiration(): number;
    onAuth(cb: (result: PromiseSettledResult<void>) => void): void;
    setAccount(account: Account): void;
    setConfig(config: WalletConfig): void;
    auth(maxTries?: number): Promise<SequenceAPIClient>;
    get isTestnetMode(): boolean | undefined;
    getAPIClient(tryAuth?: boolean): Promise<SequenceAPIClient>;
    getMetadataClient(): SequenceMetadataClient;
    getIndexerClient(chainId: ChainIdLike): Promise<Indexer>;
    private getJWT;
    private getProofString;
    private getProofStringKey;
    private isProofStringValid;
    dump(): Promise<SessionDump>;
    private now;
    static open(args: {
        sequenceApiUrl: string;
        sequenceMetadataUrl: string;
        context: WalletContext;
        networks: NetworkConfig[];
        referenceSigner: string;
        signers: {
            signer: AbstractSigner | string;
            weight: ethers.BigNumberish;
        }[];
        threshold: ethers.BigNumberish;
        metadata: SessionMeta;
        deepSearch?: boolean;
        knownConfigs?: WalletConfig[];
        noIndex?: boolean;
        configFinder?: ConfigFinder;
    }): Promise<Session>;
    static load(args: {
        sequenceApiUrl: string;
        sequenceMetadataUrl: string;
        dump: SessionDump;
        signers: AbstractSigner[];
        networks: NetworkConfig[];
    }): Session;
}
export {};
