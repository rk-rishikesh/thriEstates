import { BigNumberish, BytesLike } from 'ethers';
import { TransactionRequest as EthersTransactionRequest, TransactionResponse as EthersTransactionResponse } from '@ethersproject/providers';
import { DecodedSignature, WalletConfig } from '@0xsequence/config';
import { WalletContext } from '@0xsequence/network';
export interface Transaction {
    to: string;
    value?: BigNumberish;
    data?: BytesLike;
    nonce?: BigNumberish;
    gasLimit?: BigNumberish;
    delegateCall?: boolean;
    revertOnError?: boolean;
}
export interface TransactionEncoded {
    delegateCall: boolean;
    revertOnError: boolean;
    gasLimit: BigNumberish;
    target: string;
    value: BigNumberish;
    data: BytesLike;
}
export interface TransactionRequest extends EthersTransactionRequest {
    auxiliary?: Transactionish[];
    expiration?: BigNumberish;
    afterNonce?: NonceDependency | BigNumberish;
}
export interface NonceDependency {
    address: string;
    nonce: BigNumberish;
    space?: BigNumberish;
}
export declare type Transactionish = TransactionRequest | TransactionRequest[] | Transaction | Transaction[];
export declare type SignedTransactions = {
    digest: string;
    chainId: BigNumberish;
    config: WalletConfig;
    context: WalletContext;
    transactions: Transaction[];
    nonce: BigNumberish;
    signature: string | DecodedSignature | Promise<string> | Promise<DecodedSignature>;
};
export interface TransactionResponse<R = any> extends EthersTransactionResponse {
    receipt?: R;
}
