import { Signer, BigNumberish } from 'ethers';
import { WalletContext } from '@0xsequence/network';
import { Transaction, TransactionRequest, Transactionish, TransactionEncoded, NonceDependency, SignedTransactions } from './types';
export declare const MetaTransactionsType = "tuple(\n  bool delegateCall,\n  bool revertOnError,\n  uint256 gasLimit,\n  address target,\n  uint256 value,\n  bytes data\n)[]";
export declare function packMetaTransactionsData(...txs: Transaction[]): string;
export declare function packMetaTransactionsNonceData(nonce: BigNumberish, ...txs: Transaction[]): string;
export declare function digestOfTransactions(...txs: Transaction[]): string;
export declare function digestOfTransactionsNonce(nonce: BigNumberish, ...txs: Transaction[]): string;
export declare function computeMetaTxnHash(address: string, chainId: BigNumberish, ...txs: Transaction[]): string;
export declare function toSequenceTransactions(wallet: Signer | string, txs: (Transaction | TransactionRequest)[], revertOnError?: boolean, gasLimit?: BigNumberish): Promise<Transaction[]>;
export declare function flattenAuxTransactions(txs: (Transactionish | Transactionish)[]): (TransactionRequest | Transaction)[];
export declare function toSequenceTransaction(wallet: Signer | string, tx: TransactionRequest | Transaction, revertOnError?: boolean, gasLimit?: BigNumberish, nonce?: BigNumberish): Promise<Transaction>;
export declare function isAsyncSendable(target: any): any;
export declare function isSequenceTransaction(tx: any): tx is Transaction;
export declare function hasSequenceTransactions(txs: any[]): boolean;
export declare function readSequenceNonce(...txs: Transaction[]): BigNumberish | undefined;
export declare function sequenceTxAbiEncode(txs: Transaction[]): TransactionEncoded[];
export declare function appendNonce(txs: Transaction[], nonce: BigNumberish): Transaction[];
export declare function makeExpirable(context: WalletContext, txs: Transaction[], expiration: BigNumberish): Transaction[];
export declare function makeAfterNonce(context: WalletContext, txs: Transaction[], dep: NonceDependency): Transaction[];
export declare function encodeNonce(space: BigNumberish, nonce: BigNumberish): BigNumberish;
export declare function decodeNonce(nonce: BigNumberish): [BigNumberish, BigNumberish];
export declare function isSignedTransactions(cand: any): cand is SignedTransactions;
export declare function fromTransactionish(context: WalletContext, wallet: string, transaction: Transactionish): Promise<Transaction[]>;
