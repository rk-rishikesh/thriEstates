import { WalletConfig, DecodedSignature } from '@0xsequence/config';
import { BytesLike, ethers } from 'ethers';
import { Signer } from './signer';
import { WalletContext } from '@0xsequence/network';
export interface DecodedOwner {
    weight: number;
    address: string;
}
export interface DecodedSigner {
    r: string;
    s: string;
    v: number;
    t: number;
    weight: number;
}
export declare const fetchImageHash: (signer: Signer) => Promise<string>;
export declare const recoverConfig: (subDigest: BytesLike, signature: string | DecodedSignature, provider?: ethers.providers.Provider | undefined, context?: WalletContext | undefined, chainId?: number | undefined, walletSignersValidation?: boolean | undefined) => Promise<WalletConfig>;
export declare const recoverConfigFromDigest: (digest: BytesLike, signature: string | DecodedSignature, provider?: ethers.providers.Provider | undefined, context?: WalletContext | undefined, chainId?: number | undefined, walletSignersValidation?: boolean | undefined) => Promise<WalletConfig>;
