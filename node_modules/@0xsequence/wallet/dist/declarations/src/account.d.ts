import { TransactionRequest, JsonRpcProvider, Provider } from '@ethersproject/providers';
import { Signer as AbstractSigner, BytesLike } from 'ethers';
import { TypedDataDomain, TypedDataField } from '@ethersproject/abstract-signer';
import { Deferrable } from '@ethersproject/properties';
import { Signer, SignedTransactionsCallback } from './signer';
import { SignedTransactions, Transactionish, Transaction, TransactionResponse } from '@0xsequence/transactions';
import { WalletConfig, WalletState, ConfigFinder } from '@0xsequence/config';
import { ChainIdLike, NetworkConfig, WalletContext } from '@0xsequence/network';
import { Wallet } from './wallet';
import { FeeOption, FeeQuote, Relayer } from '@0xsequence/relayer';
export interface AccountOptions {
    initialConfig: WalletConfig;
    networks?: NetworkConfig[];
    context?: WalletContext;
    configFinder?: ConfigFinder;
}
export declare class Account extends Signer {
    private readonly options;
    private _wallets;
    private _signers;
    provider: JsonRpcProvider;
    private _chainId?;
    constructor(options: AccountOptions, ...signers: (BytesLike | AbstractSigner)[]);
    useSigners(...signers: (BytesLike | AbstractSigner)[]): Account;
    getWalletContext(): Promise<WalletContext>;
    getConfigFinder(): ConfigFinder;
    getWalletConfig(chainId?: ChainIdLike): Promise<WalletConfig[]>;
    getWalletState(chainId?: ChainIdLike): Promise<WalletState[]>;
    get address(): string;
    getAddress(): Promise<string>;
    getSigners(): Promise<string[]>;
    getProvider(chainId?: number): Promise<JsonRpcProvider | undefined>;
    getRelayer(chainId?: number): Promise<Relayer | undefined>;
    getNetworks(): Promise<NetworkConfig[]>;
    getChainId(): Promise<number>;
    getAuthChainId(): number;
    signMessage(message: BytesLike, target?: Wallet | ChainIdLike, allSigners?: boolean, isDigest?: boolean): Promise<string>;
    signAuthMessage(message: BytesLike, allSigners?: boolean, isDigest?: boolean): Promise<string>;
    signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, message: Record<string, any>, chainId?: ChainIdLike, allSigners?: boolean): Promise<string>;
    _signTypedData(domain: TypedDataDomain, types: Record<string, Array<TypedDataField>>, message: Record<string, any>, chainId?: ChainIdLike, allSigners?: boolean): Promise<string>;
    hasEnoughSigners(chainId?: ChainIdLike): Promise<boolean>;
    getFeeOptions(transaction: Deferrable<Transactionish>, chainId?: ChainIdLike, allSigners?: boolean): Promise<{
        options: FeeOption[];
        quote?: FeeQuote;
    }>;
    sendTransaction(dtransactionish: Deferrable<Transactionish>, chainId?: ChainIdLike, allSigners?: boolean, quote?: FeeQuote, callback?: SignedTransactionsCallback): Promise<TransactionResponse>;
    sendTransactionBatch(transactions: Deferrable<TransactionRequest[] | Transaction[]>, chainId?: ChainIdLike, allSigners?: boolean, quote?: FeeQuote, callback?: SignedTransactionsCallback): Promise<TransactionResponse>;
    signTransactions(dtransactionish: Deferrable<Transactionish>, chainId?: ChainIdLike, allSigners?: boolean): Promise<SignedTransactions>;
    prependConfigUpdate(dtransactionish: Deferrable<Transactionish>, chainId?: ChainIdLike, allSigners?: boolean, skipThresholdCheck?: boolean): Promise<Transactionish>;
    sendSignedTransactions(signedTxs: SignedTransactions, chainId?: ChainIdLike, quote?: FeeQuote): Promise<TransactionResponse>;
    updateConfig(newConfig?: WalletConfig, index?: boolean, quote?: FeeQuote, callback?: SignedTransactionsCallback): Promise<[WalletConfig, TransactionResponse | undefined]>;
    publishConfig(indexed?: boolean, requireFreshSigners?: string[], quote?: FeeQuote, callback?: SignedTransactionsCallback): Promise<TransactionResponse>;
    isDeployed(target?: Wallet | ChainIdLike): Promise<boolean>;
    currentConfig(target?: Wallet | NetworkConfig): Promise<WalletConfig | undefined>;
    getWallets(): {
        wallet: Wallet;
        network: NetworkConfig;
    }[];
    getWalletByNetwork(chainId: ChainIdLike): {
        wallet: Wallet;
        network: NetworkConfig;
    };
    mainWallet(): {
        wallet: Wallet;
        network: NetworkConfig;
    };
    authWallet(): {
        wallet: Wallet;
        network: NetworkConfig;
    };
    setNetworks(mainnetNetworks: NetworkConfig[], testnetNetworks?: NetworkConfig[], defaultChainId?: string | number): number;
    connect(_: Provider): AbstractSigner;
    signTransaction(_: Deferrable<TransactionRequest>): Promise<string>;
}
