import { BytesLike, Signer as AbstractSigner } from 'ethers';
import { TransactionRequest, TransactionResponse, Provider } from '@ethersproject/providers';
import { Deferrable } from '@ethersproject/properties';
import { ChainIdLike } from '@0xsequence/network';
export declare abstract class RemoteSigner extends AbstractSigner {
    abstract signMessageWithData(message: BytesLike, data?: BytesLike, chainId?: ChainIdLike): Promise<string>;
    signMessage(message: BytesLike, chainId?: number): Promise<string>;
    sendTransaction(_: TransactionRequest): Promise<TransactionResponse>;
    signTransaction(_: Deferrable<TransactionRequest>): Promise<string>;
    connect(_: Provider): AbstractSigner;
    static signMessageWithData(signer: AbstractSigner, message: BytesLike, data?: BytesLike, chainId?: number): Promise<string>;
    static isRemoteSigner(signer: AbstractSigner): signer is RemoteSigner;
}
