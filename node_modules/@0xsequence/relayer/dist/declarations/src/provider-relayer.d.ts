import { BlockTag, Provider } from '@ethersproject/providers';
import { ethers, providers } from 'ethers';
import { SignedTransactions, Transaction, TransactionResponse } from '@0xsequence/transactions';
import { WalletContext } from '@0xsequence/network';
import { WalletConfig } from '@0xsequence/config';
import { BaseRelayer, BaseRelayerOptions } from './base-relayer';
import { FeeOption, FeeQuote, Relayer, SimulateResult } from '.';
import { Optionals, Mask } from '@0xsequence/utils';
export interface ProviderRelayerOptions extends BaseRelayerOptions {
    provider: Provider;
    waitPollRate?: number;
    deltaBlocksLog?: number;
    fromBlockLog?: number;
}
export declare const ProviderRelayerDefaults: Required<Optionals<Mask<ProviderRelayerOptions, BaseRelayerOptions>>>;
export declare function isProviderRelayerOptions(obj: any): obj is ProviderRelayerOptions;
export declare abstract class ProviderRelayer extends BaseRelayer implements Relayer {
    provider: Provider;
    waitPollRate: number;
    deltaBlocksLog: number;
    fromBlockLog: number;
    constructor(options: ProviderRelayerOptions);
    abstract getFeeOptions(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<{
        options: FeeOption[];
        quote?: FeeQuote;
    }>;
    abstract gasRefundOptions(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<FeeOption[]>;
    abstract relay(signedTxs: SignedTransactions, quote?: FeeQuote): Promise<TransactionResponse>;
    simulate(wallet: string, ...transactions: Transaction[]): Promise<SimulateResult[]>;
    estimateGasLimits(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<Transaction[]>;
    getNonce(config: WalletConfig, context: WalletContext, space?: ethers.BigNumberish, blockTag?: BlockTag): Promise<ethers.BigNumberish>;
    wait(metaTxnId: string | SignedTransactions, timeout: number): Promise<providers.TransactionResponse & {
        receipt: providers.TransactionReceipt;
    }>;
}
