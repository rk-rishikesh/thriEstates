import { ethers, providers } from "ethers";
import { WalletContext } from '@0xsequence/network';
import { WalletConfig, DecodedSignature } from '@0xsequence/config';
import { SignedTransactions, Transaction } from '@0xsequence/transactions';
import { Optionals } from '@0xsequence/utils';
import { Provider } from "@ethersproject/providers";
export interface BaseRelayerOptions {
    bundleCreation?: boolean;
    creationGasLimit?: ethers.BigNumberish;
    provider?: Provider;
}
export declare function isBaseRelayerOptions(obj: any): obj is BaseRelayerOptions;
export declare const BaseRelayerDefaults: Omit<Required<Optionals<BaseRelayerOptions>>, 'provider'>;
export declare class BaseRelayer {
    readonly provider: providers.Provider | undefined;
    readonly bundleCreation: boolean;
    creationGasLimit: ethers.BigNumber;
    constructor(options?: BaseRelayerOptions);
    isWalletDeployed(walletAddress: string): Promise<boolean>;
    prepareWalletDeploy(config: WalletConfig, context: WalletContext): {
        to: string;
        data: string;
    };
    prependWalletDeploy(signedTransactions: Pick<SignedTransactions, 'config' | 'context' | 'transactions' | 'nonce' | 'signature'>): Promise<{
        to: string;
        execute: {
            transactions: Transaction[];
            nonce: ethers.BigNumber;
            signature: string;
        };
    }>;
    prepareTransactions(config: WalletConfig, context: WalletContext, signature: string | Promise<string> | DecodedSignature | Promise<DecodedSignature>, ...transactions: Transaction[]): Promise<{
        to: string;
        data: string;
    }>;
}
