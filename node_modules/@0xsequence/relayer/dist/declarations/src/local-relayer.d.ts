import { TransactionRequest } from '@ethersproject/providers';
import { Signer as AbstractSigner } from 'ethers';
import { SignedTransactions, Transaction, TransactionResponse } from '@0xsequence/transactions';
import { WalletContext } from '@0xsequence/network';
import { WalletConfig } from '@0xsequence/config';
import { FeeOption, FeeQuote, Relayer } from '.';
import { ProviderRelayer, ProviderRelayerOptions } from './provider-relayer';
export declare type LocalRelayerOptions = Omit<ProviderRelayerOptions, "provider"> & {
    signer: AbstractSigner;
};
export declare function isLocalRelayerOptions(obj: any): obj is LocalRelayerOptions;
export declare class LocalRelayer extends ProviderRelayer implements Relayer {
    private signer;
    private txnOptions;
    constructor(options: LocalRelayerOptions | AbstractSigner);
    deployWallet(config: WalletConfig, context: WalletContext): Promise<TransactionResponse>;
    getFeeOptions(_config: WalletConfig, _context: WalletContext, ..._transactions: Transaction[]): Promise<{
        options: FeeOption[];
    }>;
    gasRefundOptions(config: WalletConfig, context: WalletContext, ...transactions: Transaction[]): Promise<FeeOption[]>;
    setTransactionOptions(transactionRequest: TransactionRequest): void;
    relay(signedTxs: SignedTransactions, quote?: FeeQuote): Promise<TransactionResponse>;
}
