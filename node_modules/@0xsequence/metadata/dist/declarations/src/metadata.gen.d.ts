export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.4.0";
export declare const WebRPCSchemaHash = "3f6b0f4aa1a7b58488e9399c277fc17995d74f5a";
export declare enum ContractType {
    UNKNOWN = "UNKNOWN",
    ERC20 = "ERC20",
    ERC721 = "ERC721",
    ERC1155 = "ERC1155"
}
export declare enum SwapType {
    UNKNOWN = "UNKNOWN",
    BUY = "BUY",
    SELL = "SELL"
}
export declare enum SortOrder {
    DESC = "DESC",
    ASC = "ASC"
}
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface RuntimeStatus {
    healthOK: boolean;
    startTime: string;
    uptime: number;
    ver: string;
    branch: string;
    commitHash: string;
    checks: RuntimeChecks;
}
export interface RuntimeChecks {
}
export interface ContractIndex {
    chainId: number;
    address: string;
    type: ContractType;
    metadata: {
        [key: string]: any;
    };
}
export interface TokenIndex {
    chainId: number;
    contractAddress: string;
    tokenId: string;
    metadata: {
        [key: string]: any;
    };
}
export interface ContractInfo {
    chainId: number;
    address: string;
    name: string;
    type: string;
    symbol: string;
    decimals?: number;
    logoURI: string;
    extensions: ContractInfoExtensions;
}
export interface ContractInfoExtensions {
    link: string;
    description: string;
    ogImage: string;
    originChainId: number;
    originAddress: string;
    blacklist: boolean;
}
export interface TokenMetadata {
    tokenId: string;
    contractAddress: string;
    name: string;
    description: string;
    image: string;
    decimals: number;
    properties: {
        [key: string]: any;
    };
    video: string;
    audio: string;
    image_data: string;
    external_url: string;
    background_color: string;
    animation_url: string;
    attributes: Array<{
        [key: string]: any;
    }>;
}
export interface GetNiftyswapUnitPricesRequest {
    swapType: SwapType;
    ids: Array<string>;
    amounts: Array<string>;
}
export interface Page {
    pageSize?: number;
    page?: number;
}
export interface SortBy {
    column: string;
    order: SortOrder;
}
export interface Metadata {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    getTokenMetadata(args: GetTokenMetadataArgs, headers?: object): Promise<GetTokenMetadataReturn>;
    getTokenMetadataBatch(args: GetTokenMetadataBatchArgs, headers?: object): Promise<GetTokenMetadataBatchReturn>;
    searchTokenMetadata(args: SearchTokenMetadataArgs, headers?: object): Promise<SearchTokenMetadataReturn>;
    searchTokenIDs(args: SearchTokenIDsArgs, headers?: object): Promise<SearchTokenIDsReturn>;
    getContractInfo(args: GetContractInfoArgs, headers?: object): Promise<GetContractInfoReturn>;
    getContractInfoBatch(args: GetContractInfoBatchArgs, headers?: object): Promise<GetContractInfoBatchReturn>;
    searchContractInfo(args: SearchContractInfoArgs, headers?: object): Promise<SearchContractInfoReturn>;
    searchContractInfoBatch(args: SearchContractInfoBatchArgs, headers?: object): Promise<SearchContractInfoBatchReturn>;
    getNiftyswapTokenQuantity(args: GetNiftyswapTokenQuantityArgs, headers?: object): Promise<GetNiftyswapTokenQuantityReturn>;
    getNiftyswapUnitPrices(args: GetNiftyswapUnitPricesArgs, headers?: object): Promise<GetNiftyswapUnitPricesReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetTokenMetadataArgs {
    chainID: string;
    contractAddress: string;
    tokenIDs: Array<string>;
}
export interface GetTokenMetadataReturn {
    tokenMetadata: Array<TokenMetadata>;
}
export interface GetTokenMetadataBatchArgs {
    chainID: string;
    contractTokenMap: {
        [key: string]: Array<string>;
    };
}
export interface GetTokenMetadataBatchReturn {
    contractTokenMetadata: {
        [key: string]: Array<TokenMetadata>;
    };
}
export interface SearchTokenMetadataArgs {
    chainID: string;
    contractAddress: string;
    filter: string;
    page?: Page;
}
export interface SearchTokenMetadataReturn {
    page: Page;
    tokenMetadata: Array<TokenMetadata>;
}
export interface SearchTokenIDsArgs {
    chainID: string;
    contractAddress: string;
    filter: string;
    page?: Page;
}
export interface SearchTokenIDsReturn {
    page: Page;
    tokenIds: Array<string>;
}
export interface GetContractInfoArgs {
    chainID: string;
    contractAddress: string;
}
export interface GetContractInfoReturn {
    contractInfo: ContractInfo;
}
export interface GetContractInfoBatchArgs {
    chainID: string;
    contractAddresses: Array<string>;
}
export interface GetContractInfoBatchReturn {
    contractInfoMap: {
        [key: string]: ContractInfo;
    };
}
export interface SearchContractInfoArgs {
    contractAddress: string;
}
export interface SearchContractInfoReturn {
    contractInfoList: Array<ContractInfo>;
}
export interface SearchContractInfoBatchArgs {
    contractAddresses: Array<string>;
}
export interface SearchContractInfoBatchReturn {
    contractInfoByChain: {
        [key: string]: Array<ContractInfo>;
    };
}
export interface GetNiftyswapTokenQuantityArgs {
    chainID: string;
    contractAddress: string;
    tokenIDs: Array<string>;
}
export interface GetNiftyswapTokenQuantityReturn {
    quantity: {
        [key: string]: string;
    };
}
export interface GetNiftyswapUnitPricesArgs {
    chainID: string;
    contractAddress: string;
    req: GetNiftyswapUnitPricesRequest;
}
export interface GetNiftyswapUnitPricesReturn {
    prices: {
        [key: string]: string;
    };
}
export declare class Metadata implements Metadata {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    getTokenMetadata: (args: GetTokenMetadataArgs, headers?: object | undefined) => Promise<GetTokenMetadataReturn>;
    getTokenMetadataBatch: (args: GetTokenMetadataBatchArgs, headers?: object | undefined) => Promise<GetTokenMetadataBatchReturn>;
    searchTokenMetadata: (args: SearchTokenMetadataArgs, headers?: object | undefined) => Promise<SearchTokenMetadataReturn>;
    searchTokenIDs: (args: SearchTokenIDsArgs, headers?: object | undefined) => Promise<SearchTokenIDsReturn>;
    getContractInfo: (args: GetContractInfoArgs, headers?: object | undefined) => Promise<GetContractInfoReturn>;
    getContractInfoBatch: (args: GetContractInfoBatchArgs, headers?: object | undefined) => Promise<GetContractInfoBatchReturn>;
    searchContractInfo: (args: SearchContractInfoArgs, headers?: object | undefined) => Promise<SearchContractInfoReturn>;
    searchContractInfoBatch: (args: SearchContractInfoBatchArgs, headers?: object | undefined) => Promise<SearchContractInfoBatchReturn>;
    getNiftyswapTokenQuantity: (args: GetNiftyswapTokenQuantityArgs, headers?: object | undefined) => Promise<GetNiftyswapTokenQuantityReturn>;
    getNiftyswapUnitPrices: (args: GetNiftyswapUnitPricesArgs, headers?: object | undefined) => Promise<GetNiftyswapUnitPricesReturn>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export declare type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
