'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var fetch = require('cross-fetch');

function _interopDefault (e) { return e && e.__esModule ? e : { 'default': e }; }

var fetch__default = /*#__PURE__*/_interopDefault(fetch);

function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/* eslint-disable */
// sequence-metadata v0.4.0 3f6b0f4aa1a7b58488e9399c277fc17995d74f5a
// --
// This file has been generated by https://github.com/webrpc/webrpc using gen/typescript
// Do not edit by hand. Update your webrpc schema and re-generate.
// WebRPC description and code-gen version
const WebRPCVersion = "v1"; // Schema version of your RIDL schema

const WebRPCSchemaVersion = "v0.4.0"; // Schema hash generated from your RIDL schema

const WebRPCSchemaHash = "3f6b0f4aa1a7b58488e9399c277fc17995d74f5a"; //
// Types
//

exports.ContractType = void 0;

(function (ContractType) {
  ContractType["UNKNOWN"] = "UNKNOWN";
  ContractType["ERC20"] = "ERC20";
  ContractType["ERC721"] = "ERC721";
  ContractType["ERC1155"] = "ERC1155";
})(exports.ContractType || (exports.ContractType = {}));

exports.SwapType = void 0;

(function (SwapType) {
  SwapType["UNKNOWN"] = "UNKNOWN";
  SwapType["BUY"] = "BUY";
  SwapType["SELL"] = "SELL";
})(exports.SwapType || (exports.SwapType = {}));

exports.SortOrder = void 0;

(function (SortOrder) {
  SortOrder["DESC"] = "DESC";
  SortOrder["ASC"] = "ASC";
})(exports.SortOrder || (exports.SortOrder = {}));

//
// Client
//
class Metadata {
  constructor(hostname, fetch) {
    this.hostname = void 0;
    this.fetch = void 0;
    this.path = '/rpc/Metadata/';

    this.ping = headers => {
      return this.fetch(this.url('Ping'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };

    this.version = headers => {
      return this.fetch(this.url('Version'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            version: _data.version
          };
        });
      });
    };

    this.runtimeStatus = headers => {
      return this.fetch(this.url('RuntimeStatus'), createHTTPRequest({}, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            status: _data.status
          };
        });
      });
    };

    this.getTokenMetadata = (args, headers) => {
      return this.fetch(this.url('GetTokenMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            tokenMetadata: _data.tokenMetadata
          };
        });
      });
    };

    this.getTokenMetadataBatch = (args, headers) => {
      return this.fetch(this.url('GetTokenMetadataBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractTokenMetadata: _data.contractTokenMetadata
          };
        });
      });
    };

    this.searchTokenMetadata = (args, headers) => {
      return this.fetch(this.url('SearchTokenMetadata'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenMetadata: _data.tokenMetadata
          };
        });
      });
    };

    this.searchTokenIDs = (args, headers) => {
      return this.fetch(this.url('SearchTokenIDs'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            page: _data.page,
            tokenIds: _data.tokenIds
          };
        });
      });
    };

    this.getContractInfo = (args, headers) => {
      return this.fetch(this.url('GetContractInfo'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfo: _data.contractInfo
          };
        });
      });
    };

    this.getContractInfoBatch = (args, headers) => {
      return this.fetch(this.url('GetContractInfoBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoMap: _data.contractInfoMap
          };
        });
      });
    };

    this.searchContractInfo = (args, headers) => {
      return this.fetch(this.url('SearchContractInfo'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoList: _data.contractInfoList
          };
        });
      });
    };

    this.searchContractInfoBatch = (args, headers) => {
      return this.fetch(this.url('SearchContractInfoBatch'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            contractInfoByChain: _data.contractInfoByChain
          };
        });
      });
    };

    this.getNiftyswapTokenQuantity = (args, headers) => {
      return this.fetch(this.url('GetNiftyswapTokenQuantity'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            quantity: _data.quantity
          };
        });
      });
    };

    this.getNiftyswapUnitPrices = (args, headers) => {
      return this.fetch(this.url('GetNiftyswapUnitPrices'), createHTTPRequest(args, headers)).then(res => {
        return buildResponse(res).then(_data => {
          return {
            prices: _data.prices
          };
        });
      });
    };

    this.hostname = hostname;
    this.fetch = fetch;
  }

  url(name) {
    return this.hostname + this.path + name;
  }

}

const createHTTPRequest = (body = {}, headers = {}) => {
  return {
    method: 'POST',
    headers: _extends({}, headers, {
      'Content-Type': 'application/json'
    }),
    body: JSON.stringify(body || {})
  };
};

const buildResponse = res => {
  return res.text().then(text => {
    let data;

    try {
      data = JSON.parse(text);
    } catch (err) {
      throw {
        code: 'unknown',
        msg: `expecting JSON, got: ${text}`,
        status: res.status
      };
    }

    if (!res.ok) {
      throw data; // webrpc error response
    }

    return data;
  });
};

class SequenceMetadataClient extends Metadata {
  constructor(hostname = 'https://metadata.sequence.app') {
    super(hostname.endsWith('/') ? hostname.slice(0, -1) : hostname, fetch__default["default"]);
  }

}

exports.Metadata = Metadata;
exports.SequenceMetadataClient = SequenceMetadataClient;
exports.WebRPCSchemaHash = WebRPCSchemaHash;
exports.WebRPCSchemaVersion = WebRPCSchemaVersion;
exports.WebRPCVersion = WebRPCVersion;
