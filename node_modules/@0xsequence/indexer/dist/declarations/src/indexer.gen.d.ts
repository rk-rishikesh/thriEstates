export declare const WebRPCVersion = "v1";
export declare const WebRPCSchemaVersion = "v0.4.0";
export declare const WebRPCSchemaHash = "6071879702f8258e8912ca95cf2d9c1459ca991d";
export interface ContractInfo {
    chainId: number;
    address: string;
    name: string;
    type: string;
    symbol: string;
    decimals?: number;
    logoURI: string;
    extensions: ContractInfoExtensions;
}
export interface ContractInfoExtensions {
    link: string;
    description: string;
    ogImage: string;
    originChainId: number;
    originAddress: string;
    blacklist: boolean;
}
export interface TokenMetadata {
    tokenId: string;
    contractAddress: string;
    name: string;
    description: string;
    image: string;
    decimals: number;
    properties: {
        [key: string]: any;
    };
    video: string;
    audio: string;
    image_data: string;
    external_url: string;
    background_color: string;
    animation_url: string;
    attributes: Array<{
        [key: string]: any;
    }>;
}
export declare enum ContractType {
    UNKNOWN = "UNKNOWN",
    ERC20 = "ERC20",
    ERC721 = "ERC721",
    ERC1155 = "ERC1155",
    SEQUENCE_WALLET = "SEQUENCE_WALLET",
    ERC20_BRIDGE = "ERC20_BRIDGE",
    ERC721_BRIDGE = "ERC721_BRIDGE",
    ERC1155_BRIDGE = "ERC1155_BRIDGE"
}
export declare enum EventLogType {
    UNKNOWN = "UNKNOWN",
    BLOCK_ADDED = "BLOCK_ADDED",
    BLOCK_REMOVED = "BLOCK_REMOVED"
}
export declare enum EventLogDataType {
    UNKNOWN = "UNKNOWN",
    TOKEN_TRANSFER = "TOKEN_TRANSFER",
    SEQUENCE_TXN = "SEQUENCE_TXN"
}
export declare enum TxnTransferType {
    UNKNOWN = "UNKNOWN",
    SEND = "SEND",
    RECEIVE = "RECEIVE"
}
export declare enum SortOrder {
    DESC = "DESC",
    ASC = "ASC"
}
export interface Version {
    webrpcVersion: string;
    schemaVersion: string;
    schemaHash: string;
    appVersion: string;
}
export interface RuntimeStatus {
    healthOK: boolean;
    indexerEnabled: boolean;
    startTime: string;
    uptime: number;
    ver: string;
    branch: string;
    commitHash: string;
    chainID: number;
    checks: RuntimeChecks;
}
export interface RuntimeChecks {
    running: boolean;
    syncMode: string;
    lastBlockNum: number;
}
export interface EtherBalance {
    accountAddress: string;
    balanceWei: string;
}
export interface IndexState {
    chainId: string;
    lastBlockNum: number;
}
export interface EventLog {
    id: number;
    type: EventLogType;
    blockNumber: number;
    blockHash: string;
    contractAddress: string;
    contractType: ContractType;
    txnHash: string;
    txnIndex: number;
    txnLogIndex: number;
    logDataType: EventLogDataType;
    ts: string;
    logData: string;
}
export interface TokenBalance {
    id: number;
    contractAddress: string;
    contractType: ContractType;
    accountAddress: string;
    tokenID: string;
    balance: string;
    blockHash: string;
    blockNumber: number;
    updateId: number;
    chainId: number;
    contractInfo?: ContractInfo;
    tokenMetadata?: TokenMetadata;
}
export interface TokenHistory {
    id: number;
    blockNumber: number;
    blockHash: string;
    contractAddress: string;
    contractType: ContractType;
    fromAddress: string;
    toAddress: string;
    txnHash: string;
    txnIndex: number;
    txnLogIndex: number;
    logData: string;
    ts: string;
}
export interface TokenSupply {
    tokenID: string;
    supply: string;
    chainId: number;
    contractInfo?: ContractInfo;
    tokenMetadata?: TokenMetadata;
}
export interface Transaction {
    txnHash: string;
    blockNumber: number;
    blockHash: string;
    chainId: number;
    metaTxnID?: string;
    transfers?: Array<TxnTransfer>;
    timestamp: string;
}
export interface TxnTransfer {
    transferType: TxnTransferType;
    contractAddress: string;
    contractType: ContractType;
    from: string;
    to: string;
    tokenIds?: Array<string>;
    amounts: Array<string>;
    logIndex: number;
    contractInfo?: ContractInfo;
    tokenMetadata?: {
        [key: string]: TokenMetadata;
    };
}
export interface TransactionHistoryFilter {
    accountAddress?: string;
    contractAddress?: string;
    accountAddresses?: Array<string>;
    contractAddresses?: Array<string>;
    transactionHashes?: Array<string>;
    metaTransactionIDs?: Array<string>;
    fromBlock?: number;
    toBlock?: number;
}
export interface Page {
    page?: number;
    column?: string;
    before?: any;
    after?: any;
    sort?: Array<SortBy>;
    pageSize?: number;
    more?: boolean;
}
export interface SortBy {
    column: string;
    order: SortOrder;
}
export interface Indexer {
    ping(headers?: object): Promise<PingReturn>;
    version(headers?: object): Promise<VersionReturn>;
    runtimeStatus(headers?: object): Promise<RuntimeStatusReturn>;
    getChainID(headers?: object): Promise<GetChainIDReturn>;
    getEtherBalance(args: GetEtherBalanceArgs, headers?: object): Promise<GetEtherBalanceReturn>;
    getTokenBalances(args: GetTokenBalancesArgs, headers?: object): Promise<GetTokenBalancesReturn>;
    getTokenSupplies(args: GetTokenSuppliesArgs, headers?: object): Promise<GetTokenSuppliesReturn>;
    getTokenSuppliesMap(args: GetTokenSuppliesMapArgs, headers?: object): Promise<GetTokenSuppliesMapReturn>;
    getBalanceUpdates(args: GetBalanceUpdatesArgs, headers?: object): Promise<GetBalanceUpdatesReturn>;
    getTransactionHistory(args: GetTransactionHistoryArgs, headers?: object): Promise<GetTransactionHistoryReturn>;
    syncBalance(args: SyncBalanceArgs, headers?: object): Promise<SyncBalanceReturn>;
}
export interface PingArgs {
}
export interface PingReturn {
    status: boolean;
}
export interface VersionArgs {
}
export interface VersionReturn {
    version: Version;
}
export interface RuntimeStatusArgs {
}
export interface RuntimeStatusReturn {
    status: RuntimeStatus;
}
export interface GetChainIDArgs {
}
export interface GetChainIDReturn {
    chainID: number;
}
export interface GetEtherBalanceArgs {
    accountAddress?: string;
}
export interface GetEtherBalanceReturn {
    balance: EtherBalance;
}
export interface GetTokenBalancesArgs {
    accountAddress?: string;
    contractAddress?: string;
    includeMetadata?: boolean;
    page?: Page;
}
export interface GetTokenBalancesReturn {
    page: Page;
    balances: Array<TokenBalance>;
}
export interface GetTokenSuppliesArgs {
    contractAddress: string;
    includeMetadata?: boolean;
    page?: Page;
}
export interface GetTokenSuppliesReturn {
    page: Page;
    contractType: ContractType;
    tokenIDs: Array<TokenSupply>;
}
export interface GetTokenSuppliesMapArgs {
    tokenMap: {
        [key: string]: Array<string>;
    };
    includeMetadata?: boolean;
}
export interface GetTokenSuppliesMapReturn {
    supplies: {
        [key: string]: Array<TokenSupply>;
    };
}
export interface GetBalanceUpdatesArgs {
    contractAddress: string;
    lastUpdateID: number;
    page?: Page;
}
export interface GetBalanceUpdatesReturn {
    page: Page;
    balances: Array<TokenBalance>;
}
export interface GetTransactionHistoryArgs {
    filter: TransactionHistoryFilter;
    page?: Page;
    includeMetadata?: boolean;
}
export interface GetTransactionHistoryReturn {
    page: Page;
    transactions: Array<Transaction>;
}
export interface SyncBalanceArgs {
    accountAddress: string;
    contractAddress: string;
    tokenID?: string;
}
export interface SyncBalanceReturn {
}
export declare class Indexer implements Indexer {
    protected hostname: string;
    protected fetch: Fetch;
    protected path: string;
    constructor(hostname: string, fetch: Fetch);
    private url;
    ping: (headers?: object | undefined) => Promise<PingReturn>;
    version: (headers?: object | undefined) => Promise<VersionReturn>;
    runtimeStatus: (headers?: object | undefined) => Promise<RuntimeStatusReturn>;
    getChainID: (headers?: object | undefined) => Promise<GetChainIDReturn>;
    getEtherBalance: (args: GetEtherBalanceArgs, headers?: object | undefined) => Promise<GetEtherBalanceReturn>;
    getTokenBalances: (args: GetTokenBalancesArgs, headers?: object | undefined) => Promise<GetTokenBalancesReturn>;
    getTokenSupplies: (args: GetTokenSuppliesArgs, headers?: object | undefined) => Promise<GetTokenSuppliesReturn>;
    getTokenSuppliesMap: (args: GetTokenSuppliesMapArgs, headers?: object | undefined) => Promise<GetTokenSuppliesMapReturn>;
    getBalanceUpdates: (args: GetBalanceUpdatesArgs, headers?: object | undefined) => Promise<GetBalanceUpdatesReturn>;
    getTransactionHistory: (args: GetTransactionHistoryArgs, headers?: object | undefined) => Promise<GetTransactionHistoryReturn>;
    syncBalance: (args: SyncBalanceArgs, headers?: object | undefined) => Promise<SyncBalanceReturn>;
}
export interface WebRPCError extends Error {
    code: string;
    msg: string;
    status: number;
}
export declare type Fetch = (input: RequestInfo, init?: RequestInit) => Promise<Response>;
